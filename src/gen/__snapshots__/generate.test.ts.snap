// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Test sample AST specifications should generate proper output for dogfood.yaml using json 1`] = `
Object {
  "bases": Map {},
  "leaves": Map {
    "BuiltinType" => Object {
      "extends": Array [],
      "fields": Map {
        "types" => Object {
          "struct": "set",
          "type": Object {
            "kind": "enum",
            "tags": Array [
              "str",
              "num",
              "bool",
            ],
          },
        },
      },
      "name": "BuiltinType",
      "parentUnion": Object {
        "name": "FieldType",
        "subtypes": Array [
          "BuiltinType",
          "EnumType",
          "NodeType",
        ],
        "type": "union",
      },
      "rootUnion": Object {
        "name": "FieldType",
        "subtypes": Array [],
        "type": "union",
      },
      "tag": "builtintype",
      "type": "leaf",
    },
    "EnumType" => Object {
      "extends": Array [],
      "fields": Map {
        "tags" => Object {
          "struct": "array",
          "type": Object {
            "kind": "builtin",
            "types": Array [
              "string",
            ],
          },
        },
      },
      "name": "EnumType",
      "parentUnion": Object {
        "name": "FieldType",
        "subtypes": Array [
          "BuiltinType",
          "EnumType",
          "NodeType",
        ],
        "type": "union",
      },
      "rootUnion": Object {
        "name": "FieldType",
        "subtypes": Array [],
        "type": "union",
      },
      "tag": "enumtype",
      "type": "leaf",
    },
    "NodeType" => Object {
      "extends": Array [],
      "fields": Map {
        "types" => Object {
          "struct": "array",
          "type": Object {
            "kind": "builtin",
            "types": Array [
              "string",
            ],
          },
        },
      },
      "name": "NodeType",
      "parentUnion": Object {
        "name": "FieldType",
        "subtypes": Array [
          "BuiltinType",
          "EnumType",
          "NodeType",
        ],
        "type": "union",
      },
      "rootUnion": Object {
        "name": "FieldType",
        "subtypes": Array [],
        "type": "union",
      },
      "tag": "nodetype",
      "type": "leaf",
    },
    "Field" => Object {
      "extends": Array [],
      "fields": Map {
        "type" => Object {
          "struct": "scalar",
          "type": Object {
            "kind": "node",
            "types": Array [
              "FieldType",
            ],
          },
        },
        "struct" => Object {
          "struct": "scalar",
          "type": Object {
            "kind": "enum",
            "tags": Array [
              "scalar",
              "optional",
              "map",
              "set",
              "array",
            ],
          },
        },
      },
      "name": "Field",
      "parentUnion": Object {
        "name": "Field",
        "subtypes": Array [],
        "type": "union",
      },
      "rootUnion": Object {
        "name": "Field",
        "subtypes": Array [],
        "type": "union",
      },
      "tag": "field",
      "type": "leaf",
    },
    "NodeField" => Object {
      "extends": Array [],
      "fields": Map {
        "type" => Object {
          "struct": "scalar",
          "type": Object {
            "kind": "node",
            "types": Array [
              "NodeType",
            ],
          },
        },
        "struct" => Object {
          "struct": "scalar",
          "type": Object {
            "kind": "enum",
            "tags": Array [
              "FieldStruct",
            ],
          },
        },
      },
      "name": "NodeField",
      "parentUnion": Object {
        "name": "NodeField",
        "subtypes": Array [],
        "type": "union",
      },
      "rootUnion": Object {
        "name": "NodeField",
        "subtypes": Array [],
        "type": "union",
      },
      "tag": "nodefield",
      "type": "leaf",
    },
    "ASTUnionType" => Object {
      "extends": Array [],
      "fields": Map {
        "name" => Object {
          "struct": "scalar",
          "type": Object {
            "kind": "builtin",
            "types": Array [
              "string",
            ],
          },
        },
        "subtypes" => Object {
          "struct": "array",
          "type": Object {
            "kind": "builtin",
            "types": Array [
              "string",
            ],
          },
        },
      },
      "name": "ASTUnionType",
      "parentUnion": Object {
        "name": "ASTTree",
        "subtypes": Array [
          "ASTUnionType",
          "ASTLeafType",
        ],
        "type": "union",
      },
      "rootUnion": Object {
        "name": "ASTTree",
        "subtypes": Array [],
        "type": "union",
      },
      "tag": "astuniontype",
      "type": "leaf",
    },
    "ASTLeafType" => Object {
      "extends": Array [],
      "fields": Map {
        "tag" => Object {
          "struct": "scalar",
          "type": Object {
            "kind": "builtin",
            "types": Array [
              "string",
            ],
          },
        },
        "rootUnion" => Object {
          "struct": "scalar",
          "type": Object {
            "kind": "builtin",
            "types": Array [
              "string",
            ],
          },
        },
        "name" => Object {
          "struct": "scalar",
          "type": Object {
            "kind": "builtin",
            "types": Array [
              "string",
            ],
          },
        },
        "bases" => Object {
          "struct": "array",
          "type": Object {
            "kind": "builtin",
            "types": Array [
              "string",
            ],
          },
        },
        "fields" => Object {
          "struct": "map",
          "type": Object {
            "kind": "node",
            "types": Array [
              "Field",
            ],
          },
        },
      },
      "name": "ASTLeafType",
      "parentUnion": Object {
        "name": "ASTTree",
        "subtypes": Array [
          "ASTUnionType",
          "ASTLeafType",
        ],
        "type": "union",
      },
      "rootUnion": Object {
        "name": "ASTTree",
        "subtypes": Array [],
        "type": "union",
      },
      "tag": "astleaftype",
      "type": "leaf",
    },
  },
  "names": Set {
    "FieldType",
    "BuiltinType",
    "EnumType",
    "NodeType",
    "Field",
    "NodeField",
    "ASTTree",
    "ASTUnionType",
    "ASTLeafType",
  },
  "options": Object {
    "constructor": "inline",
    "maps": "json",
    "optional": "json",
    "tagName": "kind",
  },
  "unions": Map {
    "FieldType" => Object {
      "name": "FieldType",
      "subtypes": Array [
        "BuiltinType",
        "EnumType",
        "NodeType",
      ],
      "type": "union",
    },
    "ASTTree" => Object {
      "name": "ASTTree",
      "subtypes": Array [
        "ASTUnionType",
        "ASTLeafType",
      ],
      "type": "union",
    },
  },
}
`;

exports[`Test sample AST specifications should generate proper output for dogfood.yaml using json 2`] = `
"/**
 * DO NOT EDIT - This file was generated by verger.  If you want to change something
 * edit the upstream AST specification and regenerate this file
 **/

/**
 * This code implements the types and functions associated with
 * the leaf type BuiltinType.
 **/
export interface BuiltinType {
  kind: \\"builtintype\\";
  types: Set<\\"str\\" | \\"num\\" | \\"bool\\">;
}
export class BuiltinType {
  /**
   * A predicate function that take an instance of type FieldType and determines if it is an instance of BuiltinType
   **/
  static is = (x: FieldType): x is BuiltinType => {
    return x.kind === \\"builtintype\\";
  };
  /**
   * Given an instance of BuiltinType, determine all children that are instances of FieldType
   **/
  static children = (x: BuiltinType) => {
    return [] as const;
  };
  /**
   * Although generally not necessary, this tag can be used to identify instances of BuiltinType
   **/
  static tag = \\"builtintype\\";
}
/**
 * This function can be invoked to create a new instance of BuiltinType
 **/
export function builtinType(types: Set<\\"str\\" | \\"num\\" | \\"bool\\">): BuiltinType {
  return { kind: \\"builtintype\\", types };
}

/**
 * This code implements the types and functions associated with
 * the leaf type EnumType.
 **/
export interface EnumType {
  kind: \\"enumtype\\";
  tags: string[];
}
export class EnumType {
  /**
   * A predicate function that take an instance of type FieldType and determines if it is an instance of EnumType
   **/
  static is = (x: FieldType): x is EnumType => {
    return x.kind === \\"enumtype\\";
  };
  /**
   * Given an instance of EnumType, determine all children that are instances of FieldType
   **/
  static children = (x: EnumType) => {
    return [] as const;
  };
  /**
   * Although generally not necessary, this tag can be used to identify instances of EnumType
   **/
  static tag = \\"enumtype\\";
}
/**
 * This function can be invoked to create a new instance of EnumType
 **/
export function enumType(tags: string[]): EnumType {
  return { kind: \\"enumtype\\", tags };
}

/**
 * This code implements the types and functions associated with
 * the leaf type NodeType.
 **/
export interface NodeType {
  kind: \\"nodetype\\";
  types: string[];
}
export class NodeType {
  /**
   * A predicate function that take an instance of type FieldType and determines if it is an instance of NodeType
   **/
  static is = (x: FieldType): x is NodeType => {
    return x.kind === \\"nodetype\\";
  };
  /**
   * Given an instance of NodeType, determine all children that are instances of FieldType
   **/
  static children = (x: NodeType) => {
    return [] as const;
  };
  /**
   * Although generally not necessary, this tag can be used to identify instances of NodeType
   **/
  static tag = \\"nodetype\\";
}
/**
 * This function can be invoked to create a new instance of NodeType
 **/
export function nodeType(types: string[]): NodeType {
  return { kind: \\"nodetype\\", types };
}

/**
 * This code implements the types and functions associated with
 * the leaf type Field.
 **/
export interface Field {
  kind: \\"field\\";
  type: FieldType;
  struct: \\"scalar\\" | \\"optional\\" | \\"map\\" | \\"set\\" | \\"array\\";
}
export class Field {
  /**
   * A predicate function that take an instance of type Field and determines if it is an instance of Field
   **/
  static is = (x: Field): x is Field => {
    return x.kind === \\"field\\";
  };
  /**
   * Given an instance of Field, determine all children that are instances of Field
   **/
  static children = (x: Field) => {
    return [x.type] as const;
  };
  /**
   * Although generally not necessary, this tag can be used to identify instances of Field
   **/
  static tag = \\"field\\";
}
/**
 * This function can be invoked to create a new instance of Field
 **/
export function field(
  type: FieldType,
  struct: \\"scalar\\" | \\"optional\\" | \\"map\\" | \\"set\\" | \\"array\\"
): Field {
  return { kind: \\"field\\", type, struct };
}

/**
 * This code implements the types and functions associated with
 * the leaf type NodeField.
 **/
export interface NodeField {
  kind: \\"nodefield\\";
  type: NodeType;
  struct: \\"FieldStruct\\";
}
export class NodeField {
  /**
   * A predicate function that take an instance of type NodeField and determines if it is an instance of NodeField
   **/
  static is = (x: NodeField): x is NodeField => {
    return x.kind === \\"nodefield\\";
  };
  /**
   * Given an instance of NodeField, determine all children that are instances of NodeField
   **/
  static children = (x: NodeField) => {
    return [x.type] as const;
  };
  /**
   * Although generally not necessary, this tag can be used to identify instances of NodeField
   **/
  static tag = \\"nodefield\\";
}
/**
 * This function can be invoked to create a new instance of NodeField
 **/
export function nodeField(type: NodeType, struct: \\"FieldStruct\\"): NodeField {
  return { kind: \\"nodefield\\", type, struct };
}

/**
 * This code implements the types and functions associated with
 * the leaf type ASTUnionType.
 **/
export interface ASTUnionType {
  kind: \\"astuniontype\\";
  name: string;
  subtypes: string[];
}
export class ASTUnionType {
  /**
   * A predicate function that take an instance of type ASTTree and determines if it is an instance of ASTUnionType
   **/
  static is = (x: ASTTree): x is ASTUnionType => {
    return x.kind === \\"astuniontype\\";
  };
  /**
   * Given an instance of ASTUnionType, determine all children that are instances of ASTTree
   **/
  static children = (x: ASTUnionType) => {
    return [] as const;
  };
  /**
   * Although generally not necessary, this tag can be used to identify instances of ASTUnionType
   **/
  static tag = \\"astuniontype\\";
}
/**
 * This function can be invoked to create a new instance of ASTUnionType
 **/
export function aSTUnionType(name: string, subtypes: string[]): ASTUnionType {
  return { kind: \\"astuniontype\\", name, subtypes };
}

/**
 * This code implements the types and functions associated with
 * the leaf type ASTLeafType.
 **/
export interface ASTLeafType {
  kind: \\"astleaftype\\";
  tag: string;
  rootUnion: string;
  name: string;
  bases: string[];
  fields: Record<string, Field>;
}
export class ASTLeafType {
  /**
   * A predicate function that take an instance of type ASTTree and determines if it is an instance of ASTLeafType
   **/
  static is = (x: ASTTree): x is ASTLeafType => {
    return x.kind === \\"astleaftype\\";
  };
  /**
   * Given an instance of ASTLeafType, determine all children that are instances of ASTTree
   **/
  static children = (x: ASTLeafType) => {
    return [...Object.entries(x.fields).map((x) => x[1])] as const;
  };
  /**
   * Although generally not necessary, this tag can be used to identify instances of ASTLeafType
   **/
  static tag = \\"astleaftype\\";
}
/**
 * This function can be invoked to create a new instance of ASTLeafType
 **/
export function aSTLeafType(
  tag: string,
  rootUnion: string,
  name: string,
  bases: string[],
  fields: Record<string, Field>
): ASTLeafType {
  return { kind: \\"astleaftype\\", tag, rootUnion, name, bases, fields };
}

/**
 * This code implements the types and functions associated with
 * the union type FieldType.
 **/
export type FieldType = BuiltinType | EnumType | NodeType;
namespace FieldType {
  /**
   * Given an instance of type FieldType, map that value depending on the
   * specific underlying node type
   **/
  export const match = <R>(
    n: FieldType,
    f: {
      BuiltinType: (n: BuiltinType) => R;
      EnumType: (n: EnumType) => R;
      NodeType: (n: NodeType) => R;
    }
  ) => {
    switch (n.kind) {
      case \\"builtintype\\":
        return f.BuiltinType(n);
      case \\"enumtype\\":
        return f.EnumType(n);
      case \\"nodetype\\":
        return f.NodeType(n);
      default: {
        const x: never = n;
        throw new Error(
          \\"Instance of FieldType has unexpected value for kind: \\" +
            (n as any).tag
        );
      }
    }
  };
  /**
   * Given an instance of type FieldType, map that value for certain subtypes
   * and for all others, simply return the \`orElse\` argument
   **/
  export const partialMatch = <R>(
    n: FieldType,
    f: Partial<{
      BuiltinType: (n: BuiltinType) => R;
      EnumType: (n: EnumType) => R;
      NodeType: (n: NodeType) => R;
    }>,
    orElse: R
  ) => {
    if (n.kind === \\"builtintype\\" && f.BuiltinType) return f.BuiltinType(n);
    if (n.kind === \\"enumtype\\" && f.EnumType) return f.EnumType(n);
    if (n.kind === \\"nodetype\\" && f.NodeType) return f.NodeType(n);
    return orElse;
  };
  /**
   * Given an instance of type FieldType, take action depending on the
   * specific underlying node type
   **/
  export const forEach = (
    n: FieldType,
    f: {
      BuiltinType: (n: BuiltinType) => void;
      EnumType: (n: EnumType) => void;
      NodeType: (n: NodeType) => void;
    }
  ): void => {
    switch (n.kind) {
      case \\"builtintype\\":
        return f.BuiltinType(n);
      case \\"enumtype\\":
        return f.EnumType(n);
      case \\"nodetype\\":
        return f.NodeType(n);
      default: {
        const x: never = n;
        throw new Error(
          \\"Instance of FieldType has unexpected value for kind: \\" +
            (n as any).tag
        );
      }
    }
  };
  /**
   * Given an instance of type FieldType, take action for certain subtypes
   * and for all others, simply return the \`orElse\` argument
   **/
  export const partialForEach = (
    n: FieldType,
    f: Partial<{
      BuiltinType: (n: BuiltinType) => void;
      EnumType: (n: EnumType) => void;
      NodeType: (n: NodeType) => void;
    }>,
    orElse?: (n: FieldType) => void
  ) => {
    if (n.kind === \\"builtintype\\" && f.BuiltinType) return f.BuiltinType(n);
    if (n.kind === \\"enumtype\\" && f.EnumType) return f.EnumType(n);
    if (n.kind === \\"nodetype\\" && f.NodeType) return f.NodeType(n);
    if (orElse) return orElse(n);
  };
}

/**
 * This code implements the types and functions associated with
 * the union type ASTTree.
 **/
export type ASTTree = ASTUnionType | ASTLeafType;
namespace ASTTree {
  /**
   * Given an instance of type ASTTree, map that value depending on the
   * specific underlying node type
   **/
  export const match = <R>(
    n: ASTTree,
    f: {
      ASTUnionType: (n: ASTUnionType) => R;
      ASTLeafType: (n: ASTLeafType) => R;
    }
  ) => {
    switch (n.kind) {
      case \\"astuniontype\\":
        return f.ASTUnionType(n);
      case \\"astleaftype\\":
        return f.ASTLeafType(n);
      default: {
        const x: never = n;
        throw new Error(
          \\"Instance of ASTTree has unexpected value for kind: \\" + (n as any).tag
        );
      }
    }
  };
  /**
   * Given an instance of type ASTTree, map that value for certain subtypes
   * and for all others, simply return the \`orElse\` argument
   **/
  export const partialMatch = <R>(
    n: ASTTree,
    f: Partial<{
      ASTUnionType: (n: ASTUnionType) => R;
      ASTLeafType: (n: ASTLeafType) => R;
    }>,
    orElse: R
  ) => {
    if (n.kind === \\"astuniontype\\" && f.ASTUnionType) return f.ASTUnionType(n);
    if (n.kind === \\"astleaftype\\" && f.ASTLeafType) return f.ASTLeafType(n);
    return orElse;
  };
  /**
   * Given an instance of type ASTTree, take action depending on the
   * specific underlying node type
   **/
  export const forEach = (
    n: ASTTree,
    f: {
      ASTUnionType: (n: ASTUnionType) => void;
      ASTLeafType: (n: ASTLeafType) => void;
    }
  ): void => {
    switch (n.kind) {
      case \\"astuniontype\\":
        return f.ASTUnionType(n);
      case \\"astleaftype\\":
        return f.ASTLeafType(n);
      default: {
        const x: never = n;
        throw new Error(
          \\"Instance of ASTTree has unexpected value for kind: \\" + (n as any).tag
        );
      }
    }
  };
  /**
   * Given an instance of type ASTTree, take action for certain subtypes
   * and for all others, simply return the \`orElse\` argument
   **/
  export const partialForEach = (
    n: ASTTree,
    f: Partial<{
      ASTUnionType: (n: ASTUnionType) => void;
      ASTLeafType: (n: ASTLeafType) => void;
    }>,
    orElse?: (n: ASTTree) => void
  ) => {
    if (n.kind === \\"astuniontype\\" && f.ASTUnionType) return f.ASTUnionType(n);
    if (n.kind === \\"astleaftype\\" && f.ASTLeafType) return f.ASTLeafType(n);
    if (orElse) return orElse(n);
  };
}
"
`;

exports[`Test sample AST specifications should generate proper output for dogfood.yaml using purify 1`] = `
Object {
  "bases": Map {},
  "leaves": Map {
    "BuiltinType" => Object {
      "extends": Array [],
      "fields": Map {
        "types" => Object {
          "struct": "set",
          "type": Object {
            "kind": "enum",
            "tags": Array [
              "str",
              "num",
              "bool",
            ],
          },
        },
      },
      "name": "BuiltinType",
      "parentUnion": Object {
        "name": "FieldType",
        "subtypes": Array [
          "BuiltinType",
          "EnumType",
          "NodeType",
        ],
        "type": "union",
      },
      "rootUnion": Object {
        "name": "FieldType",
        "subtypes": Array [],
        "type": "union",
      },
      "tag": "builtintype",
      "type": "leaf",
    },
    "EnumType" => Object {
      "extends": Array [],
      "fields": Map {
        "tags" => Object {
          "struct": "array",
          "type": Object {
            "kind": "builtin",
            "types": Array [
              "string",
            ],
          },
        },
      },
      "name": "EnumType",
      "parentUnion": Object {
        "name": "FieldType",
        "subtypes": Array [
          "BuiltinType",
          "EnumType",
          "NodeType",
        ],
        "type": "union",
      },
      "rootUnion": Object {
        "name": "FieldType",
        "subtypes": Array [],
        "type": "union",
      },
      "tag": "enumtype",
      "type": "leaf",
    },
    "NodeType" => Object {
      "extends": Array [],
      "fields": Map {
        "types" => Object {
          "struct": "array",
          "type": Object {
            "kind": "builtin",
            "types": Array [
              "string",
            ],
          },
        },
      },
      "name": "NodeType",
      "parentUnion": Object {
        "name": "FieldType",
        "subtypes": Array [
          "BuiltinType",
          "EnumType",
          "NodeType",
        ],
        "type": "union",
      },
      "rootUnion": Object {
        "name": "FieldType",
        "subtypes": Array [],
        "type": "union",
      },
      "tag": "nodetype",
      "type": "leaf",
    },
    "Field" => Object {
      "extends": Array [],
      "fields": Map {
        "type" => Object {
          "struct": "scalar",
          "type": Object {
            "kind": "node",
            "types": Array [
              "FieldType",
            ],
          },
        },
        "struct" => Object {
          "struct": "scalar",
          "type": Object {
            "kind": "enum",
            "tags": Array [
              "scalar",
              "optional",
              "map",
              "set",
              "array",
            ],
          },
        },
      },
      "name": "Field",
      "parentUnion": Object {
        "name": "Field",
        "subtypes": Array [],
        "type": "union",
      },
      "rootUnion": Object {
        "name": "Field",
        "subtypes": Array [],
        "type": "union",
      },
      "tag": "field",
      "type": "leaf",
    },
    "NodeField" => Object {
      "extends": Array [],
      "fields": Map {
        "type" => Object {
          "struct": "scalar",
          "type": Object {
            "kind": "node",
            "types": Array [
              "NodeType",
            ],
          },
        },
        "struct" => Object {
          "struct": "scalar",
          "type": Object {
            "kind": "enum",
            "tags": Array [
              "FieldStruct",
            ],
          },
        },
      },
      "name": "NodeField",
      "parentUnion": Object {
        "name": "NodeField",
        "subtypes": Array [],
        "type": "union",
      },
      "rootUnion": Object {
        "name": "NodeField",
        "subtypes": Array [],
        "type": "union",
      },
      "tag": "nodefield",
      "type": "leaf",
    },
    "ASTUnionType" => Object {
      "extends": Array [],
      "fields": Map {
        "name" => Object {
          "struct": "scalar",
          "type": Object {
            "kind": "builtin",
            "types": Array [
              "string",
            ],
          },
        },
        "subtypes" => Object {
          "struct": "array",
          "type": Object {
            "kind": "builtin",
            "types": Array [
              "string",
            ],
          },
        },
      },
      "name": "ASTUnionType",
      "parentUnion": Object {
        "name": "ASTTree",
        "subtypes": Array [
          "ASTUnionType",
          "ASTLeafType",
        ],
        "type": "union",
      },
      "rootUnion": Object {
        "name": "ASTTree",
        "subtypes": Array [],
        "type": "union",
      },
      "tag": "astuniontype",
      "type": "leaf",
    },
    "ASTLeafType" => Object {
      "extends": Array [],
      "fields": Map {
        "tag" => Object {
          "struct": "scalar",
          "type": Object {
            "kind": "builtin",
            "types": Array [
              "string",
            ],
          },
        },
        "rootUnion" => Object {
          "struct": "scalar",
          "type": Object {
            "kind": "builtin",
            "types": Array [
              "string",
            ],
          },
        },
        "name" => Object {
          "struct": "scalar",
          "type": Object {
            "kind": "builtin",
            "types": Array [
              "string",
            ],
          },
        },
        "bases" => Object {
          "struct": "array",
          "type": Object {
            "kind": "builtin",
            "types": Array [
              "string",
            ],
          },
        },
        "fields" => Object {
          "struct": "map",
          "type": Object {
            "kind": "node",
            "types": Array [
              "Field",
            ],
          },
        },
      },
      "name": "ASTLeafType",
      "parentUnion": Object {
        "name": "ASTTree",
        "subtypes": Array [
          "ASTUnionType",
          "ASTLeafType",
        ],
        "type": "union",
      },
      "rootUnion": Object {
        "name": "ASTTree",
        "subtypes": Array [],
        "type": "union",
      },
      "tag": "astleaftype",
      "type": "leaf",
    },
  },
  "names": Set {
    "FieldType",
    "BuiltinType",
    "EnumType",
    "NodeType",
    "Field",
    "NodeField",
    "ASTTree",
    "ASTUnionType",
    "ASTLeafType",
  },
  "options": Object {
    "constructor": "inline",
    "maps": "json",
    "optional": "purify",
    "tagName": "kind",
  },
  "unions": Map {
    "FieldType" => Object {
      "name": "FieldType",
      "subtypes": Array [
        "BuiltinType",
        "EnumType",
        "NodeType",
      ],
      "type": "union",
    },
    "ASTTree" => Object {
      "name": "ASTTree",
      "subtypes": Array [
        "ASTUnionType",
        "ASTLeafType",
      ],
      "type": "union",
    },
  },
}
`;

exports[`Test sample AST specifications should generate proper output for dogfood.yaml using purify 2`] = `
"/**
 * DO NOT EDIT - This file was generated by verger.  If you want to change something
 * edit the upstream AST specification and regenerate this file
 **/

/**
 * This code implements the types and functions associated with
 * the leaf type BuiltinType.
 **/
export interface BuiltinType {
  kind: \\"builtintype\\";
  types: Set<\\"str\\" | \\"num\\" | \\"bool\\">;
}
export class BuiltinType {
  /**
   * A predicate function that take an instance of type FieldType and determines if it is an instance of BuiltinType
   **/
  static is = (x: FieldType): x is BuiltinType => {
    return x.kind === \\"builtintype\\";
  };
  /**
   * Given an instance of BuiltinType, determine all children that are instances of FieldType
   **/
  static children = (x: BuiltinType) => {
    return [] as const;
  };
  /**
   * Although generally not necessary, this tag can be used to identify instances of BuiltinType
   **/
  static tag = \\"builtintype\\";
}
/**
 * This function can be invoked to create a new instance of BuiltinType
 **/
export function builtinType(types: Set<\\"str\\" | \\"num\\" | \\"bool\\">): BuiltinType {
  return { kind: \\"builtintype\\", types };
}

/**
 * This code implements the types and functions associated with
 * the leaf type EnumType.
 **/
export interface EnumType {
  kind: \\"enumtype\\";
  tags: string[];
}
export class EnumType {
  /**
   * A predicate function that take an instance of type FieldType and determines if it is an instance of EnumType
   **/
  static is = (x: FieldType): x is EnumType => {
    return x.kind === \\"enumtype\\";
  };
  /**
   * Given an instance of EnumType, determine all children that are instances of FieldType
   **/
  static children = (x: EnumType) => {
    return [] as const;
  };
  /**
   * Although generally not necessary, this tag can be used to identify instances of EnumType
   **/
  static tag = \\"enumtype\\";
}
/**
 * This function can be invoked to create a new instance of EnumType
 **/
export function enumType(tags: string[]): EnumType {
  return { kind: \\"enumtype\\", tags };
}

/**
 * This code implements the types and functions associated with
 * the leaf type NodeType.
 **/
export interface NodeType {
  kind: \\"nodetype\\";
  types: string[];
}
export class NodeType {
  /**
   * A predicate function that take an instance of type FieldType and determines if it is an instance of NodeType
   **/
  static is = (x: FieldType): x is NodeType => {
    return x.kind === \\"nodetype\\";
  };
  /**
   * Given an instance of NodeType, determine all children that are instances of FieldType
   **/
  static children = (x: NodeType) => {
    return [] as const;
  };
  /**
   * Although generally not necessary, this tag can be used to identify instances of NodeType
   **/
  static tag = \\"nodetype\\";
}
/**
 * This function can be invoked to create a new instance of NodeType
 **/
export function nodeType(types: string[]): NodeType {
  return { kind: \\"nodetype\\", types };
}

/**
 * This code implements the types and functions associated with
 * the leaf type Field.
 **/
export interface Field {
  kind: \\"field\\";
  type: FieldType;
  struct: \\"scalar\\" | \\"optional\\" | \\"map\\" | \\"set\\" | \\"array\\";
}
export class Field {
  /**
   * A predicate function that take an instance of type Field and determines if it is an instance of Field
   **/
  static is = (x: Field): x is Field => {
    return x.kind === \\"field\\";
  };
  /**
   * Given an instance of Field, determine all children that are instances of Field
   **/
  static children = (x: Field) => {
    return [x.type] as const;
  };
  /**
   * Although generally not necessary, this tag can be used to identify instances of Field
   **/
  static tag = \\"field\\";
}
/**
 * This function can be invoked to create a new instance of Field
 **/
export function field(
  type: FieldType,
  struct: \\"scalar\\" | \\"optional\\" | \\"map\\" | \\"set\\" | \\"array\\"
): Field {
  return { kind: \\"field\\", type, struct };
}

/**
 * This code implements the types and functions associated with
 * the leaf type NodeField.
 **/
export interface NodeField {
  kind: \\"nodefield\\";
  type: NodeType;
  struct: \\"FieldStruct\\";
}
export class NodeField {
  /**
   * A predicate function that take an instance of type NodeField and determines if it is an instance of NodeField
   **/
  static is = (x: NodeField): x is NodeField => {
    return x.kind === \\"nodefield\\";
  };
  /**
   * Given an instance of NodeField, determine all children that are instances of NodeField
   **/
  static children = (x: NodeField) => {
    return [x.type] as const;
  };
  /**
   * Although generally not necessary, this tag can be used to identify instances of NodeField
   **/
  static tag = \\"nodefield\\";
}
/**
 * This function can be invoked to create a new instance of NodeField
 **/
export function nodeField(type: NodeType, struct: \\"FieldStruct\\"): NodeField {
  return { kind: \\"nodefield\\", type, struct };
}

/**
 * This code implements the types and functions associated with
 * the leaf type ASTUnionType.
 **/
export interface ASTUnionType {
  kind: \\"astuniontype\\";
  name: string;
  subtypes: string[];
}
export class ASTUnionType {
  /**
   * A predicate function that take an instance of type ASTTree and determines if it is an instance of ASTUnionType
   **/
  static is = (x: ASTTree): x is ASTUnionType => {
    return x.kind === \\"astuniontype\\";
  };
  /**
   * Given an instance of ASTUnionType, determine all children that are instances of ASTTree
   **/
  static children = (x: ASTUnionType) => {
    return [] as const;
  };
  /**
   * Although generally not necessary, this tag can be used to identify instances of ASTUnionType
   **/
  static tag = \\"astuniontype\\";
}
/**
 * This function can be invoked to create a new instance of ASTUnionType
 **/
export function aSTUnionType(name: string, subtypes: string[]): ASTUnionType {
  return { kind: \\"astuniontype\\", name, subtypes };
}

/**
 * This code implements the types and functions associated with
 * the leaf type ASTLeafType.
 **/
export interface ASTLeafType {
  kind: \\"astleaftype\\";
  tag: string;
  rootUnion: string;
  name: string;
  bases: string[];
  fields: Record<string, Field>;
}
export class ASTLeafType {
  /**
   * A predicate function that take an instance of type ASTTree and determines if it is an instance of ASTLeafType
   **/
  static is = (x: ASTTree): x is ASTLeafType => {
    return x.kind === \\"astleaftype\\";
  };
  /**
   * Given an instance of ASTLeafType, determine all children that are instances of ASTTree
   **/
  static children = (x: ASTLeafType) => {
    return [...Object.entries(x.fields).map((x) => x[1])] as const;
  };
  /**
   * Although generally not necessary, this tag can be used to identify instances of ASTLeafType
   **/
  static tag = \\"astleaftype\\";
}
/**
 * This function can be invoked to create a new instance of ASTLeafType
 **/
export function aSTLeafType(
  tag: string,
  rootUnion: string,
  name: string,
  bases: string[],
  fields: Record<string, Field>
): ASTLeafType {
  return { kind: \\"astleaftype\\", tag, rootUnion, name, bases, fields };
}

/**
 * This code implements the types and functions associated with
 * the union type FieldType.
 **/
export type FieldType = BuiltinType | EnumType | NodeType;
namespace FieldType {
  /**
   * Given an instance of type FieldType, map that value depending on the
   * specific underlying node type
   **/
  export const match = <R>(
    n: FieldType,
    f: {
      BuiltinType: (n: BuiltinType) => R;
      EnumType: (n: EnumType) => R;
      NodeType: (n: NodeType) => R;
    }
  ) => {
    switch (n.kind) {
      case \\"builtintype\\":
        return f.BuiltinType(n);
      case \\"enumtype\\":
        return f.EnumType(n);
      case \\"nodetype\\":
        return f.NodeType(n);
      default: {
        const x: never = n;
        throw new Error(
          \\"Instance of FieldType has unexpected value for kind: \\" +
            (n as any).tag
        );
      }
    }
  };
  /**
   * Given an instance of type FieldType, map that value for certain subtypes
   * and for all others, simply return the \`orElse\` argument
   **/
  export const partialMatch = <R>(
    n: FieldType,
    f: Partial<{
      BuiltinType: (n: BuiltinType) => R;
      EnumType: (n: EnumType) => R;
      NodeType: (n: NodeType) => R;
    }>,
    orElse: R
  ) => {
    if (n.kind === \\"builtintype\\" && f.BuiltinType) return f.BuiltinType(n);
    if (n.kind === \\"enumtype\\" && f.EnumType) return f.EnumType(n);
    if (n.kind === \\"nodetype\\" && f.NodeType) return f.NodeType(n);
    return orElse;
  };
  /**
   * Given an instance of type FieldType, take action depending on the
   * specific underlying node type
   **/
  export const forEach = (
    n: FieldType,
    f: {
      BuiltinType: (n: BuiltinType) => void;
      EnumType: (n: EnumType) => void;
      NodeType: (n: NodeType) => void;
    }
  ): void => {
    switch (n.kind) {
      case \\"builtintype\\":
        return f.BuiltinType(n);
      case \\"enumtype\\":
        return f.EnumType(n);
      case \\"nodetype\\":
        return f.NodeType(n);
      default: {
        const x: never = n;
        throw new Error(
          \\"Instance of FieldType has unexpected value for kind: \\" +
            (n as any).tag
        );
      }
    }
  };
  /**
   * Given an instance of type FieldType, take action for certain subtypes
   * and for all others, simply return the \`orElse\` argument
   **/
  export const partialForEach = (
    n: FieldType,
    f: Partial<{
      BuiltinType: (n: BuiltinType) => void;
      EnumType: (n: EnumType) => void;
      NodeType: (n: NodeType) => void;
    }>,
    orElse?: (n: FieldType) => void
  ) => {
    if (n.kind === \\"builtintype\\" && f.BuiltinType) return f.BuiltinType(n);
    if (n.kind === \\"enumtype\\" && f.EnumType) return f.EnumType(n);
    if (n.kind === \\"nodetype\\" && f.NodeType) return f.NodeType(n);
    if (orElse) return orElse(n);
  };
}

/**
 * This code implements the types and functions associated with
 * the union type ASTTree.
 **/
export type ASTTree = ASTUnionType | ASTLeafType;
namespace ASTTree {
  /**
   * Given an instance of type ASTTree, map that value depending on the
   * specific underlying node type
   **/
  export const match = <R>(
    n: ASTTree,
    f: {
      ASTUnionType: (n: ASTUnionType) => R;
      ASTLeafType: (n: ASTLeafType) => R;
    }
  ) => {
    switch (n.kind) {
      case \\"astuniontype\\":
        return f.ASTUnionType(n);
      case \\"astleaftype\\":
        return f.ASTLeafType(n);
      default: {
        const x: never = n;
        throw new Error(
          \\"Instance of ASTTree has unexpected value for kind: \\" + (n as any).tag
        );
      }
    }
  };
  /**
   * Given an instance of type ASTTree, map that value for certain subtypes
   * and for all others, simply return the \`orElse\` argument
   **/
  export const partialMatch = <R>(
    n: ASTTree,
    f: Partial<{
      ASTUnionType: (n: ASTUnionType) => R;
      ASTLeafType: (n: ASTLeafType) => R;
    }>,
    orElse: R
  ) => {
    if (n.kind === \\"astuniontype\\" && f.ASTUnionType) return f.ASTUnionType(n);
    if (n.kind === \\"astleaftype\\" && f.ASTLeafType) return f.ASTLeafType(n);
    return orElse;
  };
  /**
   * Given an instance of type ASTTree, take action depending on the
   * specific underlying node type
   **/
  export const forEach = (
    n: ASTTree,
    f: {
      ASTUnionType: (n: ASTUnionType) => void;
      ASTLeafType: (n: ASTLeafType) => void;
    }
  ): void => {
    switch (n.kind) {
      case \\"astuniontype\\":
        return f.ASTUnionType(n);
      case \\"astleaftype\\":
        return f.ASTLeafType(n);
      default: {
        const x: never = n;
        throw new Error(
          \\"Instance of ASTTree has unexpected value for kind: \\" + (n as any).tag
        );
      }
    }
  };
  /**
   * Given an instance of type ASTTree, take action for certain subtypes
   * and for all others, simply return the \`orElse\` argument
   **/
  export const partialForEach = (
    n: ASTTree,
    f: Partial<{
      ASTUnionType: (n: ASTUnionType) => void;
      ASTLeafType: (n: ASTLeafType) => void;
    }>,
    orElse?: (n: ASTTree) => void
  ) => {
    if (n.kind === \\"astuniontype\\" && f.ASTUnionType) return f.ASTUnionType(n);
    if (n.kind === \\"astleaftype\\" && f.ASTLeafType) return f.ASTLeafType(n);
    if (orElse) return orElse(n);
  };
}
"
`;

exports[`Test sample AST specifications should generate proper output for expr.yaml using json 1`] = `
Object {
  "bases": Map {
    "BinaryOp" => Object {
      "extends": Array [],
      "fields": Map {
        "left" => Object {
          "struct": "scalar",
          "type": Object {
            "kind": "node",
            "types": Array [
              "Expr",
            ],
          },
        },
        "right" => Object {
          "struct": "scalar",
          "type": Object {
            "kind": "node",
            "types": Array [
              "Expr",
            ],
          },
        },
      },
      "name": "BinaryOp",
    },
  },
  "leaves": Map {
    "Literal" => Object {
      "extends": Array [],
      "fields": Map {
        "value" => Object {
          "struct": "scalar",
          "type": Object {
            "kind": "builtin",
            "types": Array [
              "number",
            ],
          },
        },
      },
      "name": "Literal",
      "parentUnion": Object {
        "name": "Expr",
        "subtypes": Array [
          "Literal",
          "ArithmeticOp",
          "UnaryOp",
          "RelOp",
        ],
        "type": "union",
      },
      "rootUnion": Object {
        "name": "Expr",
        "subtypes": Array [],
        "type": "union",
      },
      "tag": "literal",
      "type": "leaf",
    },
    "ArithmeticOp" => Object {
      "extends": Array [
        "BinaryOp",
      ],
      "fields": Map {
        "op" => Object {
          "struct": "scalar",
          "type": Object {
            "kind": "enum",
            "tags": Array [
              "+",
              "-",
              "*",
              "/",
            ],
          },
        },
      },
      "name": "ArithmeticOp",
      "parentUnion": Object {
        "name": "Expr",
        "subtypes": Array [
          "Literal",
          "ArithmeticOp",
          "UnaryOp",
          "RelOp",
        ],
        "type": "union",
      },
      "rootUnion": Object {
        "name": "Expr",
        "subtypes": Array [],
        "type": "union",
      },
      "tag": "arithmeticop",
      "type": "leaf",
    },
    "UnaryOp" => Object {
      "extends": Array [],
      "fields": Map {
        "expr" => Object {
          "struct": "scalar",
          "type": Object {
            "kind": "node",
            "types": Array [
              "Expr",
            ],
          },
        },
        "op" => Object {
          "struct": "scalar",
          "type": Object {
            "kind": "enum",
            "tags": Array [
              "()",
              "+",
              "-",
            ],
          },
        },
      },
      "name": "UnaryOp",
      "parentUnion": Object {
        "name": "Expr",
        "subtypes": Array [
          "Literal",
          "ArithmeticOp",
          "UnaryOp",
          "RelOp",
        ],
        "type": "union",
      },
      "rootUnion": Object {
        "name": "Expr",
        "subtypes": Array [],
        "type": "union",
      },
      "tag": "unaryop",
      "type": "leaf",
    },
    "RelOp" => Object {
      "extends": Array [
        "BinaryOp",
      ],
      "fields": Map {
        "op" => Object {
          "struct": "scalar",
          "type": Object {
            "kind": "enum",
            "tags": Array [
              "+",
              "-",
              "*",
              "/",
            ],
          },
        },
      },
      "name": "RelOp",
      "parentUnion": Object {
        "name": "Expr",
        "subtypes": Array [
          "Literal",
          "ArithmeticOp",
          "UnaryOp",
          "RelOp",
        ],
        "type": "union",
      },
      "rootUnion": Object {
        "name": "Expr",
        "subtypes": Array [],
        "type": "union",
      },
      "tag": "relop",
      "type": "leaf",
    },
  },
  "names": Set {
    "Expr",
    "Literal",
    "ArithmeticOp",
    "UnaryOp",
    "RelOp",
    "BinaryOp",
  },
  "options": Object {
    "constructor": "inline",
    "maps": "json",
    "optional": "json",
    "tagName": "tag",
  },
  "unions": Map {
    "Expr" => Object {
      "name": "Expr",
      "subtypes": Array [
        "Literal",
        "ArithmeticOp",
        "UnaryOp",
        "RelOp",
      ],
      "type": "union",
    },
  },
}
`;

exports[`Test sample AST specifications should generate proper output for expr.yaml using json 2`] = `
"/**
 * DO NOT EDIT - This file was generated by verger.  If you want to change something
 * edit the upstream AST specification and regenerate this file
 **/

/**
 * This code implements the types and functions associated with
 * the base type BinaryOp.
 **/
export interface BinaryOp {
  left: Expr;
  right: Expr;
}

/**
 * This code implements the types and functions associated with
 * the leaf type Literal.
 **/
export interface Literal {
  tag: \\"literal\\";
  value: number;
}
export class Literal {
  /**
   * A predicate function that take an instance of type Expr and determines if it is an instance of Literal
   **/
  static is = (x: Expr): x is Literal => {
    return x.tag === \\"literal\\";
  };
  /**
   * Given an instance of Literal, determine all children that are instances of Expr
   **/
  static children = (x: Literal) => {
    return [] as const;
  };
  /**
   * Although generally not necessary, this tag can be used to identify instances of Literal
   **/
  static tag = \\"literal\\";
}
/**
 * This function can be invoked to create a new instance of Literal
 **/
export function literal(value: number): Literal {
  return { tag: \\"literal\\", value };
}

/**
 * This code implements the types and functions associated with
 * the leaf type ArithmeticOp.
 **/
export interface ArithmeticOp extends BinaryOp {
  tag: \\"arithmeticop\\";
  op: \\"+\\" | \\"-\\" | \\"*\\" | \\"/\\";
}
export class ArithmeticOp {
  /**
   * A predicate function that take an instance of type Expr and determines if it is an instance of ArithmeticOp
   **/
  static is = (x: Expr): x is ArithmeticOp => {
    return x.tag === \\"arithmeticop\\";
  };
  /**
   * Given an instance of ArithmeticOp, determine all children that are instances of Expr
   **/
  static children = (x: ArithmeticOp) => {
    return [x.left, x.right] as const;
  };
  /**
   * Although generally not necessary, this tag can be used to identify instances of ArithmeticOp
   **/
  static tag = \\"arithmeticop\\";
}
/**
 * This function can be invoked to create a new instance of ArithmeticOp
 **/
export function arithmeticOp(
  left: Expr,
  right: Expr,
  op: \\"+\\" | \\"-\\" | \\"*\\" | \\"/\\"
): ArithmeticOp {
  return { tag: \\"arithmeticop\\", left, right, op };
}

/**
 * This code implements the types and functions associated with
 * the leaf type UnaryOp.
 **/
export interface UnaryOp {
  tag: \\"unaryop\\";
  expr: Expr;
  op: \\"()\\" | \\"+\\" | \\"-\\";
}
export class UnaryOp {
  /**
   * A predicate function that take an instance of type Expr and determines if it is an instance of UnaryOp
   **/
  static is = (x: Expr): x is UnaryOp => {
    return x.tag === \\"unaryop\\";
  };
  /**
   * Given an instance of UnaryOp, determine all children that are instances of Expr
   **/
  static children = (x: UnaryOp) => {
    return [x.expr] as const;
  };
  /**
   * Although generally not necessary, this tag can be used to identify instances of UnaryOp
   **/
  static tag = \\"unaryop\\";
}
/**
 * This function can be invoked to create a new instance of UnaryOp
 **/
export function unaryOp(expr: Expr, op: \\"()\\" | \\"+\\" | \\"-\\"): UnaryOp {
  return { tag: \\"unaryop\\", expr, op };
}

/**
 * This code implements the types and functions associated with
 * the leaf type RelOp.
 **/
export interface RelOp extends BinaryOp {
  tag: \\"relop\\";
  op: \\"+\\" | \\"-\\" | \\"*\\" | \\"/\\";
}
export class RelOp {
  /**
   * A predicate function that take an instance of type Expr and determines if it is an instance of RelOp
   **/
  static is = (x: Expr): x is RelOp => {
    return x.tag === \\"relop\\";
  };
  /**
   * Given an instance of RelOp, determine all children that are instances of Expr
   **/
  static children = (x: RelOp) => {
    return [x.left, x.right] as const;
  };
  /**
   * Although generally not necessary, this tag can be used to identify instances of RelOp
   **/
  static tag = \\"relop\\";
}
/**
 * This function can be invoked to create a new instance of RelOp
 **/
export function relOp(
  left: Expr,
  right: Expr,
  op: \\"+\\" | \\"-\\" | \\"*\\" | \\"/\\"
): RelOp {
  return { tag: \\"relop\\", left, right, op };
}

/**
 * This code implements the types and functions associated with
 * the union type Expr.
 **/
export type Expr = Literal | ArithmeticOp | UnaryOp | RelOp;
namespace Expr {
  /**
   * Given an instance of type Expr, map that value depending on the
   * specific underlying node type
   **/
  export const match = <R>(
    n: Expr,
    f: {
      Literal: (n: Literal) => R;
      ArithmeticOp: (n: ArithmeticOp) => R;
      UnaryOp: (n: UnaryOp) => R;
      RelOp: (n: RelOp) => R;
    }
  ) => {
    switch (n.tag) {
      case \\"literal\\":
        return f.Literal(n);
      case \\"arithmeticop\\":
        return f.ArithmeticOp(n);
      case \\"unaryop\\":
        return f.UnaryOp(n);
      case \\"relop\\":
        return f.RelOp(n);
      default: {
        const x: never = n;
        throw new Error(
          \\"Instance of Expr has unexpected value for tag: \\" + (n as any).tag
        );
      }
    }
  };
  /**
   * Given an instance of type Expr, map that value for certain subtypes
   * and for all others, simply return the \`orElse\` argument
   **/
  export const partialMatch = <R>(
    n: Expr,
    f: Partial<{
      Literal: (n: Literal) => R;
      ArithmeticOp: (n: ArithmeticOp) => R;
      UnaryOp: (n: UnaryOp) => R;
      RelOp: (n: RelOp) => R;
    }>,
    orElse: R
  ) => {
    if (n.tag === \\"literal\\" && f.Literal) return f.Literal(n);
    if (n.tag === \\"arithmeticop\\" && f.ArithmeticOp) return f.ArithmeticOp(n);
    if (n.tag === \\"unaryop\\" && f.UnaryOp) return f.UnaryOp(n);
    if (n.tag === \\"relop\\" && f.RelOp) return f.RelOp(n);
    return orElse;
  };
  /**
   * Given an instance of type Expr, take action depending on the
   * specific underlying node type
   **/
  export const forEach = (
    n: Expr,
    f: {
      Literal: (n: Literal) => void;
      ArithmeticOp: (n: ArithmeticOp) => void;
      UnaryOp: (n: UnaryOp) => void;
      RelOp: (n: RelOp) => void;
    }
  ): void => {
    switch (n.tag) {
      case \\"literal\\":
        return f.Literal(n);
      case \\"arithmeticop\\":
        return f.ArithmeticOp(n);
      case \\"unaryop\\":
        return f.UnaryOp(n);
      case \\"relop\\":
        return f.RelOp(n);
      default: {
        const x: never = n;
        throw new Error(
          \\"Instance of Expr has unexpected value for tag: \\" + (n as any).tag
        );
      }
    }
  };
  /**
   * Given an instance of type Expr, take action for certain subtypes
   * and for all others, simply return the \`orElse\` argument
   **/
  export const partialForEach = (
    n: Expr,
    f: Partial<{
      Literal: (n: Literal) => void;
      ArithmeticOp: (n: ArithmeticOp) => void;
      UnaryOp: (n: UnaryOp) => void;
      RelOp: (n: RelOp) => void;
    }>,
    orElse?: (n: Expr) => void
  ) => {
    if (n.tag === \\"literal\\" && f.Literal) return f.Literal(n);
    if (n.tag === \\"arithmeticop\\" && f.ArithmeticOp) return f.ArithmeticOp(n);
    if (n.tag === \\"unaryop\\" && f.UnaryOp) return f.UnaryOp(n);
    if (n.tag === \\"relop\\" && f.RelOp) return f.RelOp(n);
    if (orElse) return orElse(n);
  };
}
"
`;

exports[`Test sample AST specifications should generate proper output for expr.yaml using purify 1`] = `
Object {
  "bases": Map {
    "BinaryOp" => Object {
      "extends": Array [],
      "fields": Map {
        "left" => Object {
          "struct": "scalar",
          "type": Object {
            "kind": "node",
            "types": Array [
              "Expr",
            ],
          },
        },
        "right" => Object {
          "struct": "scalar",
          "type": Object {
            "kind": "node",
            "types": Array [
              "Expr",
            ],
          },
        },
      },
      "name": "BinaryOp",
    },
  },
  "leaves": Map {
    "Literal" => Object {
      "extends": Array [],
      "fields": Map {
        "value" => Object {
          "struct": "scalar",
          "type": Object {
            "kind": "builtin",
            "types": Array [
              "number",
            ],
          },
        },
      },
      "name": "Literal",
      "parentUnion": Object {
        "name": "Expr",
        "subtypes": Array [
          "Literal",
          "ArithmeticOp",
          "UnaryOp",
          "RelOp",
        ],
        "type": "union",
      },
      "rootUnion": Object {
        "name": "Expr",
        "subtypes": Array [],
        "type": "union",
      },
      "tag": "literal",
      "type": "leaf",
    },
    "ArithmeticOp" => Object {
      "extends": Array [
        "BinaryOp",
      ],
      "fields": Map {
        "op" => Object {
          "struct": "scalar",
          "type": Object {
            "kind": "enum",
            "tags": Array [
              "+",
              "-",
              "*",
              "/",
            ],
          },
        },
      },
      "name": "ArithmeticOp",
      "parentUnion": Object {
        "name": "Expr",
        "subtypes": Array [
          "Literal",
          "ArithmeticOp",
          "UnaryOp",
          "RelOp",
        ],
        "type": "union",
      },
      "rootUnion": Object {
        "name": "Expr",
        "subtypes": Array [],
        "type": "union",
      },
      "tag": "arithmeticop",
      "type": "leaf",
    },
    "UnaryOp" => Object {
      "extends": Array [],
      "fields": Map {
        "expr" => Object {
          "struct": "scalar",
          "type": Object {
            "kind": "node",
            "types": Array [
              "Expr",
            ],
          },
        },
        "op" => Object {
          "struct": "scalar",
          "type": Object {
            "kind": "enum",
            "tags": Array [
              "()",
              "+",
              "-",
            ],
          },
        },
      },
      "name": "UnaryOp",
      "parentUnion": Object {
        "name": "Expr",
        "subtypes": Array [
          "Literal",
          "ArithmeticOp",
          "UnaryOp",
          "RelOp",
        ],
        "type": "union",
      },
      "rootUnion": Object {
        "name": "Expr",
        "subtypes": Array [],
        "type": "union",
      },
      "tag": "unaryop",
      "type": "leaf",
    },
    "RelOp" => Object {
      "extends": Array [
        "BinaryOp",
      ],
      "fields": Map {
        "op" => Object {
          "struct": "scalar",
          "type": Object {
            "kind": "enum",
            "tags": Array [
              "+",
              "-",
              "*",
              "/",
            ],
          },
        },
      },
      "name": "RelOp",
      "parentUnion": Object {
        "name": "Expr",
        "subtypes": Array [
          "Literal",
          "ArithmeticOp",
          "UnaryOp",
          "RelOp",
        ],
        "type": "union",
      },
      "rootUnion": Object {
        "name": "Expr",
        "subtypes": Array [],
        "type": "union",
      },
      "tag": "relop",
      "type": "leaf",
    },
  },
  "names": Set {
    "Expr",
    "Literal",
    "ArithmeticOp",
    "UnaryOp",
    "RelOp",
    "BinaryOp",
  },
  "options": Object {
    "constructor": "inline",
    "maps": "json",
    "optional": "purify",
    "tagName": "tag",
  },
  "unions": Map {
    "Expr" => Object {
      "name": "Expr",
      "subtypes": Array [
        "Literal",
        "ArithmeticOp",
        "UnaryOp",
        "RelOp",
      ],
      "type": "union",
    },
  },
}
`;

exports[`Test sample AST specifications should generate proper output for expr.yaml using purify 2`] = `
"/**
 * DO NOT EDIT - This file was generated by verger.  If you want to change something
 * edit the upstream AST specification and regenerate this file
 **/

/**
 * This code implements the types and functions associated with
 * the base type BinaryOp.
 **/
export interface BinaryOp {
  left: Expr;
  right: Expr;
}

/**
 * This code implements the types and functions associated with
 * the leaf type Literal.
 **/
export interface Literal {
  tag: \\"literal\\";
  value: number;
}
export class Literal {
  /**
   * A predicate function that take an instance of type Expr and determines if it is an instance of Literal
   **/
  static is = (x: Expr): x is Literal => {
    return x.tag === \\"literal\\";
  };
  /**
   * Given an instance of Literal, determine all children that are instances of Expr
   **/
  static children = (x: Literal) => {
    return [] as const;
  };
  /**
   * Although generally not necessary, this tag can be used to identify instances of Literal
   **/
  static tag = \\"literal\\";
}
/**
 * This function can be invoked to create a new instance of Literal
 **/
export function literal(value: number): Literal {
  return { tag: \\"literal\\", value };
}

/**
 * This code implements the types and functions associated with
 * the leaf type ArithmeticOp.
 **/
export interface ArithmeticOp extends BinaryOp {
  tag: \\"arithmeticop\\";
  op: \\"+\\" | \\"-\\" | \\"*\\" | \\"/\\";
}
export class ArithmeticOp {
  /**
   * A predicate function that take an instance of type Expr and determines if it is an instance of ArithmeticOp
   **/
  static is = (x: Expr): x is ArithmeticOp => {
    return x.tag === \\"arithmeticop\\";
  };
  /**
   * Given an instance of ArithmeticOp, determine all children that are instances of Expr
   **/
  static children = (x: ArithmeticOp) => {
    return [x.left, x.right] as const;
  };
  /**
   * Although generally not necessary, this tag can be used to identify instances of ArithmeticOp
   **/
  static tag = \\"arithmeticop\\";
}
/**
 * This function can be invoked to create a new instance of ArithmeticOp
 **/
export function arithmeticOp(
  left: Expr,
  right: Expr,
  op: \\"+\\" | \\"-\\" | \\"*\\" | \\"/\\"
): ArithmeticOp {
  return { tag: \\"arithmeticop\\", left, right, op };
}

/**
 * This code implements the types and functions associated with
 * the leaf type UnaryOp.
 **/
export interface UnaryOp {
  tag: \\"unaryop\\";
  expr: Expr;
  op: \\"()\\" | \\"+\\" | \\"-\\";
}
export class UnaryOp {
  /**
   * A predicate function that take an instance of type Expr and determines if it is an instance of UnaryOp
   **/
  static is = (x: Expr): x is UnaryOp => {
    return x.tag === \\"unaryop\\";
  };
  /**
   * Given an instance of UnaryOp, determine all children that are instances of Expr
   **/
  static children = (x: UnaryOp) => {
    return [x.expr] as const;
  };
  /**
   * Although generally not necessary, this tag can be used to identify instances of UnaryOp
   **/
  static tag = \\"unaryop\\";
}
/**
 * This function can be invoked to create a new instance of UnaryOp
 **/
export function unaryOp(expr: Expr, op: \\"()\\" | \\"+\\" | \\"-\\"): UnaryOp {
  return { tag: \\"unaryop\\", expr, op };
}

/**
 * This code implements the types and functions associated with
 * the leaf type RelOp.
 **/
export interface RelOp extends BinaryOp {
  tag: \\"relop\\";
  op: \\"+\\" | \\"-\\" | \\"*\\" | \\"/\\";
}
export class RelOp {
  /**
   * A predicate function that take an instance of type Expr and determines if it is an instance of RelOp
   **/
  static is = (x: Expr): x is RelOp => {
    return x.tag === \\"relop\\";
  };
  /**
   * Given an instance of RelOp, determine all children that are instances of Expr
   **/
  static children = (x: RelOp) => {
    return [x.left, x.right] as const;
  };
  /**
   * Although generally not necessary, this tag can be used to identify instances of RelOp
   **/
  static tag = \\"relop\\";
}
/**
 * This function can be invoked to create a new instance of RelOp
 **/
export function relOp(
  left: Expr,
  right: Expr,
  op: \\"+\\" | \\"-\\" | \\"*\\" | \\"/\\"
): RelOp {
  return { tag: \\"relop\\", left, right, op };
}

/**
 * This code implements the types and functions associated with
 * the union type Expr.
 **/
export type Expr = Literal | ArithmeticOp | UnaryOp | RelOp;
namespace Expr {
  /**
   * Given an instance of type Expr, map that value depending on the
   * specific underlying node type
   **/
  export const match = <R>(
    n: Expr,
    f: {
      Literal: (n: Literal) => R;
      ArithmeticOp: (n: ArithmeticOp) => R;
      UnaryOp: (n: UnaryOp) => R;
      RelOp: (n: RelOp) => R;
    }
  ) => {
    switch (n.tag) {
      case \\"literal\\":
        return f.Literal(n);
      case \\"arithmeticop\\":
        return f.ArithmeticOp(n);
      case \\"unaryop\\":
        return f.UnaryOp(n);
      case \\"relop\\":
        return f.RelOp(n);
      default: {
        const x: never = n;
        throw new Error(
          \\"Instance of Expr has unexpected value for tag: \\" + (n as any).tag
        );
      }
    }
  };
  /**
   * Given an instance of type Expr, map that value for certain subtypes
   * and for all others, simply return the \`orElse\` argument
   **/
  export const partialMatch = <R>(
    n: Expr,
    f: Partial<{
      Literal: (n: Literal) => R;
      ArithmeticOp: (n: ArithmeticOp) => R;
      UnaryOp: (n: UnaryOp) => R;
      RelOp: (n: RelOp) => R;
    }>,
    orElse: R
  ) => {
    if (n.tag === \\"literal\\" && f.Literal) return f.Literal(n);
    if (n.tag === \\"arithmeticop\\" && f.ArithmeticOp) return f.ArithmeticOp(n);
    if (n.tag === \\"unaryop\\" && f.UnaryOp) return f.UnaryOp(n);
    if (n.tag === \\"relop\\" && f.RelOp) return f.RelOp(n);
    return orElse;
  };
  /**
   * Given an instance of type Expr, take action depending on the
   * specific underlying node type
   **/
  export const forEach = (
    n: Expr,
    f: {
      Literal: (n: Literal) => void;
      ArithmeticOp: (n: ArithmeticOp) => void;
      UnaryOp: (n: UnaryOp) => void;
      RelOp: (n: RelOp) => void;
    }
  ): void => {
    switch (n.tag) {
      case \\"literal\\":
        return f.Literal(n);
      case \\"arithmeticop\\":
        return f.ArithmeticOp(n);
      case \\"unaryop\\":
        return f.UnaryOp(n);
      case \\"relop\\":
        return f.RelOp(n);
      default: {
        const x: never = n;
        throw new Error(
          \\"Instance of Expr has unexpected value for tag: \\" + (n as any).tag
        );
      }
    }
  };
  /**
   * Given an instance of type Expr, take action for certain subtypes
   * and for all others, simply return the \`orElse\` argument
   **/
  export const partialForEach = (
    n: Expr,
    f: Partial<{
      Literal: (n: Literal) => void;
      ArithmeticOp: (n: ArithmeticOp) => void;
      UnaryOp: (n: UnaryOp) => void;
      RelOp: (n: RelOp) => void;
    }>,
    orElse?: (n: Expr) => void
  ) => {
    if (n.tag === \\"literal\\" && f.Literal) return f.Literal(n);
    if (n.tag === \\"arithmeticop\\" && f.ArithmeticOp) return f.ArithmeticOp(n);
    if (n.tag === \\"unaryop\\" && f.UnaryOp) return f.UnaryOp(n);
    if (n.tag === \\"relop\\" && f.RelOp) return f.RelOp(n);
    if (orElse) return orElse(n);
  };
}
"
`;

exports[`Test sample AST specifications should generate proper output for kitchen.yaml using json 1`] = `
Object {
  "bases": Map {},
  "leaves": Map {
    "Function" => Object {
      "extends": Array [],
      "fields": Map {
        "name" => Object {
          "struct": "scalar",
          "type": Object {
            "kind": "builtin",
            "types": Array [
              "string",
            ],
          },
        },
        "args" => Object {
          "struct": "array",
          "type": Object {
            "kind": "node",
            "types": Array [
              "Argument",
            ],
          },
        },
        "body" => Object {
          "struct": "scalar",
          "type": Object {
            "kind": "node",
            "types": Array [
              "Body",
            ],
          },
        },
      },
      "name": "Function",
      "parentUnion": Object {
        "name": "Node",
        "subtypes": Array [
          "Function",
          "Declaration",
          "Argument",
          "Body",
          "Statement",
        ],
        "type": "union",
      },
      "rootUnion": Object {
        "name": "Node",
        "subtypes": Array [],
        "type": "union",
      },
      "tag": "function",
      "type": "leaf",
    },
    "Declaration" => Object {
      "extends": Array [],
      "fields": Map {
        "name" => Object {
          "struct": "scalar",
          "type": Object {
            "kind": "builtin",
            "types": Array [
              "string",
            ],
          },
        },
        "type" => Object {
          "struct": "scalar",
          "type": Object {
            "kind": "builtin",
            "types": Array [
              "string",
            ],
          },
        },
        "init" => Object {
          "struct": "optional",
          "type": Object {
            "kind": "builtin",
            "types": Array [
              "number",
            ],
          },
        },
      },
      "name": "Declaration",
      "parentUnion": Object {
        "name": "Node",
        "subtypes": Array [
          "Function",
          "Declaration",
          "Argument",
          "Body",
          "Statement",
        ],
        "type": "union",
      },
      "rootUnion": Object {
        "name": "Node",
        "subtypes": Array [],
        "type": "union",
      },
      "tag": "declaration",
      "type": "leaf",
    },
    "Argument" => Object {
      "extends": Array [],
      "fields": Map {
        "name" => Object {
          "struct": "scalar",
          "type": Object {
            "kind": "builtin",
            "types": Array [
              "string",
            ],
          },
        },
        "type" => Object {
          "struct": "scalar",
          "type": Object {
            "kind": "builtin",
            "types": Array [
              "string",
            ],
          },
        },
      },
      "name": "Argument",
      "parentUnion": Object {
        "name": "Node",
        "subtypes": Array [
          "Function",
          "Declaration",
          "Argument",
          "Body",
          "Statement",
        ],
        "type": "union",
      },
      "rootUnion": Object {
        "name": "Node",
        "subtypes": Array [],
        "type": "union",
      },
      "tag": "argument",
      "type": "leaf",
    },
    "Body" => Object {
      "extends": Array [],
      "fields": Map {
        "statement" => Object {
          "struct": "scalar",
          "type": Object {
            "kind": "node",
            "types": Array [
              "Statement",
            ],
          },
        },
      },
      "name": "Body",
      "parentUnion": Object {
        "name": "Node",
        "subtypes": Array [
          "Function",
          "Declaration",
          "Argument",
          "Body",
          "Statement",
        ],
        "type": "union",
      },
      "rootUnion": Object {
        "name": "Node",
        "subtypes": Array [],
        "type": "union",
      },
      "tag": "body",
      "type": "leaf",
    },
    "AssignmentStatement" => Object {
      "extends": Array [],
      "fields": Map {
        "name" => Object {
          "struct": "scalar",
          "type": Object {
            "kind": "builtin",
            "types": Array [
              "string",
            ],
          },
        },
        "init" => Object {
          "struct": "scalar",
          "type": Object {
            "kind": "builtin",
            "types": Array [
              "number",
            ],
          },
        },
      },
      "name": "AssignmentStatement",
      "parentUnion": Object {
        "name": "Statement",
        "subtypes": Array [
          "AssignmentStatement",
          "DeclarationStatement",
        ],
        "type": "union",
      },
      "rootUnion": Object {
        "name": "Node",
        "subtypes": Array [],
        "type": "union",
      },
      "tag": "assignmentstatement",
      "type": "leaf",
    },
    "DeclarationStatement" => Object {
      "extends": Array [],
      "fields": Map {
        "name" => Object {
          "struct": "scalar",
          "type": Object {
            "kind": "builtin",
            "types": Array [
              "string",
            ],
          },
        },
      },
      "name": "DeclarationStatement",
      "parentUnion": Object {
        "name": "Statement",
        "subtypes": Array [
          "AssignmentStatement",
          "DeclarationStatement",
        ],
        "type": "union",
      },
      "rootUnion": Object {
        "name": "Node",
        "subtypes": Array [],
        "type": "union",
      },
      "tag": "declarationstatement",
      "type": "leaf",
    },
  },
  "names": Set {
    "Node",
    "Function",
    "Declaration",
    "Argument",
    "Body",
    "Statement",
    "AssignmentStatement",
    "DeclarationStatement",
  },
  "options": Object {
    "constructor": "inline",
    "maps": "json",
    "optional": "json",
    "tagName": "tag",
  },
  "unions": Map {
    "Statement" => Object {
      "name": "Statement",
      "subtypes": Array [
        "AssignmentStatement",
        "DeclarationStatement",
      ],
      "type": "union",
    },
    "Node" => Object {
      "name": "Node",
      "subtypes": Array [
        "Function",
        "Declaration",
        "Argument",
        "Body",
        "Statement",
      ],
      "type": "union",
    },
  },
}
`;

exports[`Test sample AST specifications should generate proper output for kitchen.yaml using json 2`] = `
"/**
 * DO NOT EDIT - This file was generated by verger.  If you want to change something
 * edit the upstream AST specification and regenerate this file
 **/

/**
 * This code implements the types and functions associated with
 * the leaf type Function.
 **/
export interface Function {
  tag: \\"function\\";
  name: string;
  args: Argument[];
  body: Body;
}
export class Function {
  /**
   * A predicate function that take an instance of type Node and determines if it is an instance of Function
   **/
  static is = (x: Node): x is Function => {
    return x.tag === \\"function\\";
  };
  /**
   * Given an instance of Function, determine all children that are instances of Node
   **/
  static children = (x: Function) => {
    return [x.body, ...x.args] as const;
  };
  /**
   * Although generally not necessary, this tag can be used to identify instances of Function
   **/
  static tag = \\"function\\";
}
/**
 * This function can be invoked to create a new instance of Function
 **/
export function function(name: string, args: Argument[], body: Body): Function {
  return { tag: \\"function\\", name, args, body };
}

/**
 * This code implements the types and functions associated with
 * the leaf type Declaration.
 **/
export interface Declaration {
  tag: \\"declaration\\";
  name: string;
  type: string;
  init?: number;
}
export class Declaration {
  /**
   * A predicate function that take an instance of type Node and determines if it is an instance of Declaration
   **/
  static is = (x: Node): x is Declaration => {
    return x.tag === \\"declaration\\";
  };
  /**
   * Given an instance of Declaration, determine all children that are instances of Node
   **/
  static children = (x: Declaration) => {
    return [] as const;
  };
  /**
   * Although generally not necessary, this tag can be used to identify instances of Declaration
   **/
  static tag = \\"declaration\\";
}
/**
 * This function can be invoked to create a new instance of Declaration
 **/
export function declaration(
  name: string,
  type: string,
  init: number | undefined
): Declaration {
  return { tag: \\"declaration\\", name, type, init };
}

/**
 * This code implements the types and functions associated with
 * the leaf type Argument.
 **/
export interface Argument {
  tag: \\"argument\\";
  name: string;
  type: string;
}
export class Argument {
  /**
   * A predicate function that take an instance of type Node and determines if it is an instance of Argument
   **/
  static is = (x: Node): x is Argument => {
    return x.tag === \\"argument\\";
  };
  /**
   * Given an instance of Argument, determine all children that are instances of Node
   **/
  static children = (x: Argument) => {
    return [] as const;
  };
  /**
   * Although generally not necessary, this tag can be used to identify instances of Argument
   **/
  static tag = \\"argument\\";
}
/**
 * This function can be invoked to create a new instance of Argument
 **/
export function argument(name: string, type: string): Argument {
  return { tag: \\"argument\\", name, type };
}

/**
 * This code implements the types and functions associated with
 * the leaf type Body.
 **/
export interface Body {
  tag: \\"body\\";
  statement: Statement;
}
export class Body {
  /**
   * A predicate function that take an instance of type Node and determines if it is an instance of Body
   **/
  static is = (x: Node): x is Body => {
    return x.tag === \\"body\\";
  };
  /**
   * Given an instance of Body, determine all children that are instances of Node
   **/
  static children = (x: Body) => {
    return [x.statement] as const;
  };
  /**
   * Although generally not necessary, this tag can be used to identify instances of Body
   **/
  static tag = \\"body\\";
}
/**
 * This function can be invoked to create a new instance of Body
 **/
export function body(statement: Statement): Body {
  return { tag: \\"body\\", statement };
}

/**
 * This code implements the types and functions associated with
 * the leaf type AssignmentStatement.
 **/
export interface AssignmentStatement {
  tag: \\"assignmentstatement\\";
  name: string;
  init: number;
}
export class AssignmentStatement {
  /**
   * A predicate function that take an instance of type Node and determines if it is an instance of AssignmentStatement
   **/
  static is = (x: Node): x is AssignmentStatement => {
    return x.tag === \\"assignmentstatement\\";
  };
  /**
   * Given an instance of AssignmentStatement, determine all children that are instances of Node
   **/
  static children = (x: AssignmentStatement) => {
    return [] as const;
  };
  /**
   * Although generally not necessary, this tag can be used to identify instances of AssignmentStatement
   **/
  static tag = \\"assignmentstatement\\";
}
/**
 * This function can be invoked to create a new instance of AssignmentStatement
 **/
export function assignmentStatement(
  name: string,
  init: number
): AssignmentStatement {
  return { tag: \\"assignmentstatement\\", name, init };
}

/**
 * This code implements the types and functions associated with
 * the leaf type DeclarationStatement.
 **/
export interface DeclarationStatement {
  tag: \\"declarationstatement\\";
  name: string;
}
export class DeclarationStatement {
  /**
   * A predicate function that take an instance of type Node and determines if it is an instance of DeclarationStatement
   **/
  static is = (x: Node): x is DeclarationStatement => {
    return x.tag === \\"declarationstatement\\";
  };
  /**
   * Given an instance of DeclarationStatement, determine all children that are instances of Node
   **/
  static children = (x: DeclarationStatement) => {
    return [] as const;
  };
  /**
   * Although generally not necessary, this tag can be used to identify instances of DeclarationStatement
   **/
  static tag = \\"declarationstatement\\";
}
/**
 * This function can be invoked to create a new instance of DeclarationStatement
 **/
export function declarationStatement(name: string): DeclarationStatement {
  return { tag: \\"declarationstatement\\", name };
}

/**
 * This code implements the types and functions associated with
 * the union type Statement.
 **/
export type Statement = AssignmentStatement | DeclarationStatement;
namespace Statement {
  /**
   * Given an instance of type Statement, map that value depending on the
   * specific underlying node type
   **/
  export const match = <R>(
    n: Statement,
    f: {
      AssignmentStatement: (n: AssignmentStatement) => R;
      DeclarationStatement: (n: DeclarationStatement) => R;
    }
  ) => {
    switch (n.tag) {
      case \\"assignmentstatement\\":
        return f.AssignmentStatement(n);
      case \\"declarationstatement\\":
        return f.DeclarationStatement(n);
      default: {
        const x: never = n;
        throw new Error(
          \\"Instance of Statement has unexpected value for tag: \\" +
            (n as any).tag
        );
      }
    }
  };
  /**
   * Given an instance of type Statement, map that value for certain subtypes
   * and for all others, simply return the \`orElse\` argument
   **/
  export const partialMatch = <R>(
    n: Statement,
    f: Partial<{
      AssignmentStatement: (n: AssignmentStatement) => R;
      DeclarationStatement: (n: DeclarationStatement) => R;
    }>,
    orElse: R
  ) => {
    if (n.tag === \\"assignmentstatement\\" && f.AssignmentStatement)
      return f.AssignmentStatement(n);
    if (n.tag === \\"declarationstatement\\" && f.DeclarationStatement)
      return f.DeclarationStatement(n);
    return orElse;
  };
  /**
   * Given an instance of type Statement, take action depending on the
   * specific underlying node type
   **/
  export const forEach = (
    n: Statement,
    f: {
      AssignmentStatement: (n: AssignmentStatement) => void;
      DeclarationStatement: (n: DeclarationStatement) => void;
    }
  ): void => {
    switch (n.tag) {
      case \\"assignmentstatement\\":
        return f.AssignmentStatement(n);
      case \\"declarationstatement\\":
        return f.DeclarationStatement(n);
      default: {
        const x: never = n;
        throw new Error(
          \\"Instance of Statement has unexpected value for tag: \\" +
            (n as any).tag
        );
      }
    }
  };
  /**
   * Given an instance of type Statement, take action for certain subtypes
   * and for all others, simply return the \`orElse\` argument
   **/
  export const partialForEach = (
    n: Statement,
    f: Partial<{
      AssignmentStatement: (n: AssignmentStatement) => void;
      DeclarationStatement: (n: DeclarationStatement) => void;
    }>,
    orElse?: (n: Statement) => void
  ) => {
    if (n.tag === \\"assignmentstatement\\" && f.AssignmentStatement)
      return f.AssignmentStatement(n);
    if (n.tag === \\"declarationstatement\\" && f.DeclarationStatement)
      return f.DeclarationStatement(n);
    if (orElse) return orElse(n);
  };
}

/**
 * This code implements the types and functions associated with
 * the union type Node.
 **/
export type Node = Function | Declaration | Argument | Body | Statement;
namespace Node {
  /**
   * Given an instance of type Node, map that value depending on the
   * specific underlying node type
   **/
  export const match = <R>(
    n: Node,
    f: {
      Function: (n: Function) => R;
      Declaration: (n: Declaration) => R;
      Argument: (n: Argument) => R;
      Body: (n: Body) => R;
      AssignmentStatement: (n: AssignmentStatement) => R;
      DeclarationStatement: (n: DeclarationStatement) => R;
    }
  ) => {
    switch (n.tag) {
      case \\"function\\":
        return f.Function(n);
      case \\"declaration\\":
        return f.Declaration(n);
      case \\"argument\\":
        return f.Argument(n);
      case \\"body\\":
        return f.Body(n);
      case \\"assignmentstatement\\":
        return f.AssignmentStatement(n);
      case \\"declarationstatement\\":
        return f.DeclarationStatement(n);
      default: {
        const x: never = n;
        throw new Error(
          \\"Instance of Node has unexpected value for tag: \\" + (n as any).tag
        );
      }
    }
  };
  /**
   * Given an instance of type Node, map that value for certain subtypes
   * and for all others, simply return the \`orElse\` argument
   **/
  export const partialMatch = <R>(
    n: Node,
    f: Partial<{
      Function: (n: Function) => R;
      Declaration: (n: Declaration) => R;
      Argument: (n: Argument) => R;
      Body: (n: Body) => R;
      AssignmentStatement: (n: AssignmentStatement) => R;
      DeclarationStatement: (n: DeclarationStatement) => R;
    }>,
    orElse: R
  ) => {
    if (n.tag === \\"function\\" && f.Function) return f.Function(n);
    if (n.tag === \\"declaration\\" && f.Declaration) return f.Declaration(n);
    if (n.tag === \\"argument\\" && f.Argument) return f.Argument(n);
    if (n.tag === \\"body\\" && f.Body) return f.Body(n);
    if (n.tag === \\"assignmentstatement\\" && f.AssignmentStatement)
      return f.AssignmentStatement(n);
    if (n.tag === \\"declarationstatement\\" && f.DeclarationStatement)
      return f.DeclarationStatement(n);
    return orElse;
  };
  /**
   * Given an instance of type Node, take action depending on the
   * specific underlying node type
   **/
  export const forEach = (
    n: Node,
    f: {
      Function: (n: Function) => void;
      Declaration: (n: Declaration) => void;
      Argument: (n: Argument) => void;
      Body: (n: Body) => void;
      AssignmentStatement: (n: AssignmentStatement) => void;
      DeclarationStatement: (n: DeclarationStatement) => void;
    }
  ): void => {
    switch (n.tag) {
      case \\"function\\":
        return f.Function(n);
      case \\"declaration\\":
        return f.Declaration(n);
      case \\"argument\\":
        return f.Argument(n);
      case \\"body\\":
        return f.Body(n);
      case \\"assignmentstatement\\":
        return f.AssignmentStatement(n);
      case \\"declarationstatement\\":
        return f.DeclarationStatement(n);
      default: {
        const x: never = n;
        throw new Error(
          \\"Instance of Node has unexpected value for tag: \\" + (n as any).tag
        );
      }
    }
  };
  /**
   * Given an instance of type Node, take action for certain subtypes
   * and for all others, simply return the \`orElse\` argument
   **/
  export const partialForEach = (
    n: Node,
    f: Partial<{
      Function: (n: Function) => void;
      Declaration: (n: Declaration) => void;
      Argument: (n: Argument) => void;
      Body: (n: Body) => void;
      AssignmentStatement: (n: AssignmentStatement) => void;
      DeclarationStatement: (n: DeclarationStatement) => void;
    }>,
    orElse?: (n: Node) => void
  ) => {
    if (n.tag === \\"function\\" && f.Function) return f.Function(n);
    if (n.tag === \\"declaration\\" && f.Declaration) return f.Declaration(n);
    if (n.tag === \\"argument\\" && f.Argument) return f.Argument(n);
    if (n.tag === \\"body\\" && f.Body) return f.Body(n);
    if (n.tag === \\"assignmentstatement\\" && f.AssignmentStatement)
      return f.AssignmentStatement(n);
    if (n.tag === \\"declarationstatement\\" && f.DeclarationStatement)
      return f.DeclarationStatement(n);
    if (orElse) return orElse(n);
  };
}
"
`;

exports[`Test sample AST specifications should generate proper output for kitchen.yaml using purify 1`] = `
Object {
  "bases": Map {},
  "leaves": Map {
    "Function" => Object {
      "extends": Array [],
      "fields": Map {
        "name" => Object {
          "struct": "scalar",
          "type": Object {
            "kind": "builtin",
            "types": Array [
              "string",
            ],
          },
        },
        "args" => Object {
          "struct": "array",
          "type": Object {
            "kind": "node",
            "types": Array [
              "Argument",
            ],
          },
        },
        "body" => Object {
          "struct": "scalar",
          "type": Object {
            "kind": "node",
            "types": Array [
              "Body",
            ],
          },
        },
      },
      "name": "Function",
      "parentUnion": Object {
        "name": "Node",
        "subtypes": Array [
          "Function",
          "Declaration",
          "Argument",
          "Body",
          "Statement",
        ],
        "type": "union",
      },
      "rootUnion": Object {
        "name": "Node",
        "subtypes": Array [],
        "type": "union",
      },
      "tag": "function",
      "type": "leaf",
    },
    "Declaration" => Object {
      "extends": Array [],
      "fields": Map {
        "name" => Object {
          "struct": "scalar",
          "type": Object {
            "kind": "builtin",
            "types": Array [
              "string",
            ],
          },
        },
        "type" => Object {
          "struct": "scalar",
          "type": Object {
            "kind": "builtin",
            "types": Array [
              "string",
            ],
          },
        },
        "init" => Object {
          "struct": "optional",
          "type": Object {
            "kind": "builtin",
            "types": Array [
              "number",
            ],
          },
        },
      },
      "name": "Declaration",
      "parentUnion": Object {
        "name": "Node",
        "subtypes": Array [
          "Function",
          "Declaration",
          "Argument",
          "Body",
          "Statement",
        ],
        "type": "union",
      },
      "rootUnion": Object {
        "name": "Node",
        "subtypes": Array [],
        "type": "union",
      },
      "tag": "declaration",
      "type": "leaf",
    },
    "Argument" => Object {
      "extends": Array [],
      "fields": Map {
        "name" => Object {
          "struct": "scalar",
          "type": Object {
            "kind": "builtin",
            "types": Array [
              "string",
            ],
          },
        },
        "type" => Object {
          "struct": "scalar",
          "type": Object {
            "kind": "builtin",
            "types": Array [
              "string",
            ],
          },
        },
      },
      "name": "Argument",
      "parentUnion": Object {
        "name": "Node",
        "subtypes": Array [
          "Function",
          "Declaration",
          "Argument",
          "Body",
          "Statement",
        ],
        "type": "union",
      },
      "rootUnion": Object {
        "name": "Node",
        "subtypes": Array [],
        "type": "union",
      },
      "tag": "argument",
      "type": "leaf",
    },
    "Body" => Object {
      "extends": Array [],
      "fields": Map {
        "statement" => Object {
          "struct": "scalar",
          "type": Object {
            "kind": "node",
            "types": Array [
              "Statement",
            ],
          },
        },
      },
      "name": "Body",
      "parentUnion": Object {
        "name": "Node",
        "subtypes": Array [
          "Function",
          "Declaration",
          "Argument",
          "Body",
          "Statement",
        ],
        "type": "union",
      },
      "rootUnion": Object {
        "name": "Node",
        "subtypes": Array [],
        "type": "union",
      },
      "tag": "body",
      "type": "leaf",
    },
    "AssignmentStatement" => Object {
      "extends": Array [],
      "fields": Map {
        "name" => Object {
          "struct": "scalar",
          "type": Object {
            "kind": "builtin",
            "types": Array [
              "string",
            ],
          },
        },
        "init" => Object {
          "struct": "scalar",
          "type": Object {
            "kind": "builtin",
            "types": Array [
              "number",
            ],
          },
        },
      },
      "name": "AssignmentStatement",
      "parentUnion": Object {
        "name": "Statement",
        "subtypes": Array [
          "AssignmentStatement",
          "DeclarationStatement",
        ],
        "type": "union",
      },
      "rootUnion": Object {
        "name": "Node",
        "subtypes": Array [],
        "type": "union",
      },
      "tag": "assignmentstatement",
      "type": "leaf",
    },
    "DeclarationStatement" => Object {
      "extends": Array [],
      "fields": Map {
        "name" => Object {
          "struct": "scalar",
          "type": Object {
            "kind": "builtin",
            "types": Array [
              "string",
            ],
          },
        },
      },
      "name": "DeclarationStatement",
      "parentUnion": Object {
        "name": "Statement",
        "subtypes": Array [
          "AssignmentStatement",
          "DeclarationStatement",
        ],
        "type": "union",
      },
      "rootUnion": Object {
        "name": "Node",
        "subtypes": Array [],
        "type": "union",
      },
      "tag": "declarationstatement",
      "type": "leaf",
    },
  },
  "names": Set {
    "Node",
    "Function",
    "Declaration",
    "Argument",
    "Body",
    "Statement",
    "AssignmentStatement",
    "DeclarationStatement",
  },
  "options": Object {
    "constructor": "inline",
    "maps": "json",
    "optional": "purify",
    "tagName": "tag",
  },
  "unions": Map {
    "Statement" => Object {
      "name": "Statement",
      "subtypes": Array [
        "AssignmentStatement",
        "DeclarationStatement",
      ],
      "type": "union",
    },
    "Node" => Object {
      "name": "Node",
      "subtypes": Array [
        "Function",
        "Declaration",
        "Argument",
        "Body",
        "Statement",
      ],
      "type": "union",
    },
  },
}
`;

exports[`Test sample AST specifications should generate proper output for kitchen.yaml using purify 2`] = `
"import { Maybe } from \\"purify-ts/Maybe\\";
/**
 * DO NOT EDIT - This file was generated by verger.  If you want to change something
 * edit the upstream AST specification and regenerate this file
 **/

/**
 * This code implements the types and functions associated with
 * the leaf type Function.
 **/
export interface Function {
  tag: \\"function\\";
  name: string;
  args: Argument[];
  body: Body;
}
export class Function {
  /**
   * A predicate function that take an instance of type Node and determines if it is an instance of Function
   **/
  static is = (x: Node): x is Function => {
    return x.tag === \\"function\\";
  };
  /**
   * Given an instance of Function, determine all children that are instances of Node
   **/
  static children = (x: Function) => {
    return [x.body, ...x.args] as const;
  };
  /**
   * Although generally not necessary, this tag can be used to identify instances of Function
   **/
  static tag = \\"function\\";
}
/**
 * This function can be invoked to create a new instance of Function
 **/
export function function(name: string, args: Argument[], body: Body): Function {
  return { tag: \\"function\\", name, args, body };
}

/**
 * This code implements the types and functions associated with
 * the leaf type Declaration.
 **/
export interface Declaration {
  tag: \\"declaration\\";
  name: string;
  type: string;
  init: Maybe<number>;
}
export class Declaration {
  /**
   * A predicate function that take an instance of type Node and determines if it is an instance of Declaration
   **/
  static is = (x: Node): x is Declaration => {
    return x.tag === \\"declaration\\";
  };
  /**
   * Given an instance of Declaration, determine all children that are instances of Node
   **/
  static children = (x: Declaration) => {
    return [] as const;
  };
  /**
   * Although generally not necessary, this tag can be used to identify instances of Declaration
   **/
  static tag = \\"declaration\\";
}
/**
 * This function can be invoked to create a new instance of Declaration
 **/
export function declaration(
  name: string,
  type: string,
  init: Maybe<number>
): Declaration {
  return { tag: \\"declaration\\", name, type, init };
}

/**
 * This code implements the types and functions associated with
 * the leaf type Argument.
 **/
export interface Argument {
  tag: \\"argument\\";
  name: string;
  type: string;
}
export class Argument {
  /**
   * A predicate function that take an instance of type Node and determines if it is an instance of Argument
   **/
  static is = (x: Node): x is Argument => {
    return x.tag === \\"argument\\";
  };
  /**
   * Given an instance of Argument, determine all children that are instances of Node
   **/
  static children = (x: Argument) => {
    return [] as const;
  };
  /**
   * Although generally not necessary, this tag can be used to identify instances of Argument
   **/
  static tag = \\"argument\\";
}
/**
 * This function can be invoked to create a new instance of Argument
 **/
export function argument(name: string, type: string): Argument {
  return { tag: \\"argument\\", name, type };
}

/**
 * This code implements the types and functions associated with
 * the leaf type Body.
 **/
export interface Body {
  tag: \\"body\\";
  statement: Statement;
}
export class Body {
  /**
   * A predicate function that take an instance of type Node and determines if it is an instance of Body
   **/
  static is = (x: Node): x is Body => {
    return x.tag === \\"body\\";
  };
  /**
   * Given an instance of Body, determine all children that are instances of Node
   **/
  static children = (x: Body) => {
    return [x.statement] as const;
  };
  /**
   * Although generally not necessary, this tag can be used to identify instances of Body
   **/
  static tag = \\"body\\";
}
/**
 * This function can be invoked to create a new instance of Body
 **/
export function body(statement: Statement): Body {
  return { tag: \\"body\\", statement };
}

/**
 * This code implements the types and functions associated with
 * the leaf type AssignmentStatement.
 **/
export interface AssignmentStatement {
  tag: \\"assignmentstatement\\";
  name: string;
  init: number;
}
export class AssignmentStatement {
  /**
   * A predicate function that take an instance of type Node and determines if it is an instance of AssignmentStatement
   **/
  static is = (x: Node): x is AssignmentStatement => {
    return x.tag === \\"assignmentstatement\\";
  };
  /**
   * Given an instance of AssignmentStatement, determine all children that are instances of Node
   **/
  static children = (x: AssignmentStatement) => {
    return [] as const;
  };
  /**
   * Although generally not necessary, this tag can be used to identify instances of AssignmentStatement
   **/
  static tag = \\"assignmentstatement\\";
}
/**
 * This function can be invoked to create a new instance of AssignmentStatement
 **/
export function assignmentStatement(
  name: string,
  init: number
): AssignmentStatement {
  return { tag: \\"assignmentstatement\\", name, init };
}

/**
 * This code implements the types and functions associated with
 * the leaf type DeclarationStatement.
 **/
export interface DeclarationStatement {
  tag: \\"declarationstatement\\";
  name: string;
}
export class DeclarationStatement {
  /**
   * A predicate function that take an instance of type Node and determines if it is an instance of DeclarationStatement
   **/
  static is = (x: Node): x is DeclarationStatement => {
    return x.tag === \\"declarationstatement\\";
  };
  /**
   * Given an instance of DeclarationStatement, determine all children that are instances of Node
   **/
  static children = (x: DeclarationStatement) => {
    return [] as const;
  };
  /**
   * Although generally not necessary, this tag can be used to identify instances of DeclarationStatement
   **/
  static tag = \\"declarationstatement\\";
}
/**
 * This function can be invoked to create a new instance of DeclarationStatement
 **/
export function declarationStatement(name: string): DeclarationStatement {
  return { tag: \\"declarationstatement\\", name };
}

/**
 * This code implements the types and functions associated with
 * the union type Statement.
 **/
export type Statement = AssignmentStatement | DeclarationStatement;
namespace Statement {
  /**
   * Given an instance of type Statement, map that value depending on the
   * specific underlying node type
   **/
  export const match = <R>(
    n: Statement,
    f: {
      AssignmentStatement: (n: AssignmentStatement) => R;
      DeclarationStatement: (n: DeclarationStatement) => R;
    }
  ) => {
    switch (n.tag) {
      case \\"assignmentstatement\\":
        return f.AssignmentStatement(n);
      case \\"declarationstatement\\":
        return f.DeclarationStatement(n);
      default: {
        const x: never = n;
        throw new Error(
          \\"Instance of Statement has unexpected value for tag: \\" +
            (n as any).tag
        );
      }
    }
  };
  /**
   * Given an instance of type Statement, map that value for certain subtypes
   * and for all others, simply return the \`orElse\` argument
   **/
  export const partialMatch = <R>(
    n: Statement,
    f: Partial<{
      AssignmentStatement: (n: AssignmentStatement) => R;
      DeclarationStatement: (n: DeclarationStatement) => R;
    }>,
    orElse: R
  ) => {
    if (n.tag === \\"assignmentstatement\\" && f.AssignmentStatement)
      return f.AssignmentStatement(n);
    if (n.tag === \\"declarationstatement\\" && f.DeclarationStatement)
      return f.DeclarationStatement(n);
    return orElse;
  };
  /**
   * Given an instance of type Statement, take action depending on the
   * specific underlying node type
   **/
  export const forEach = (
    n: Statement,
    f: {
      AssignmentStatement: (n: AssignmentStatement) => void;
      DeclarationStatement: (n: DeclarationStatement) => void;
    }
  ): void => {
    switch (n.tag) {
      case \\"assignmentstatement\\":
        return f.AssignmentStatement(n);
      case \\"declarationstatement\\":
        return f.DeclarationStatement(n);
      default: {
        const x: never = n;
        throw new Error(
          \\"Instance of Statement has unexpected value for tag: \\" +
            (n as any).tag
        );
      }
    }
  };
  /**
   * Given an instance of type Statement, take action for certain subtypes
   * and for all others, simply return the \`orElse\` argument
   **/
  export const partialForEach = (
    n: Statement,
    f: Partial<{
      AssignmentStatement: (n: AssignmentStatement) => void;
      DeclarationStatement: (n: DeclarationStatement) => void;
    }>,
    orElse?: (n: Statement) => void
  ) => {
    if (n.tag === \\"assignmentstatement\\" && f.AssignmentStatement)
      return f.AssignmentStatement(n);
    if (n.tag === \\"declarationstatement\\" && f.DeclarationStatement)
      return f.DeclarationStatement(n);
    if (orElse) return orElse(n);
  };
}

/**
 * This code implements the types and functions associated with
 * the union type Node.
 **/
export type Node = Function | Declaration | Argument | Body | Statement;
namespace Node {
  /**
   * Given an instance of type Node, map that value depending on the
   * specific underlying node type
   **/
  export const match = <R>(
    n: Node,
    f: {
      Function: (n: Function) => R;
      Declaration: (n: Declaration) => R;
      Argument: (n: Argument) => R;
      Body: (n: Body) => R;
      AssignmentStatement: (n: AssignmentStatement) => R;
      DeclarationStatement: (n: DeclarationStatement) => R;
    }
  ) => {
    switch (n.tag) {
      case \\"function\\":
        return f.Function(n);
      case \\"declaration\\":
        return f.Declaration(n);
      case \\"argument\\":
        return f.Argument(n);
      case \\"body\\":
        return f.Body(n);
      case \\"assignmentstatement\\":
        return f.AssignmentStatement(n);
      case \\"declarationstatement\\":
        return f.DeclarationStatement(n);
      default: {
        const x: never = n;
        throw new Error(
          \\"Instance of Node has unexpected value for tag: \\" + (n as any).tag
        );
      }
    }
  };
  /**
   * Given an instance of type Node, map that value for certain subtypes
   * and for all others, simply return the \`orElse\` argument
   **/
  export const partialMatch = <R>(
    n: Node,
    f: Partial<{
      Function: (n: Function) => R;
      Declaration: (n: Declaration) => R;
      Argument: (n: Argument) => R;
      Body: (n: Body) => R;
      AssignmentStatement: (n: AssignmentStatement) => R;
      DeclarationStatement: (n: DeclarationStatement) => R;
    }>,
    orElse: R
  ) => {
    if (n.tag === \\"function\\" && f.Function) return f.Function(n);
    if (n.tag === \\"declaration\\" && f.Declaration) return f.Declaration(n);
    if (n.tag === \\"argument\\" && f.Argument) return f.Argument(n);
    if (n.tag === \\"body\\" && f.Body) return f.Body(n);
    if (n.tag === \\"assignmentstatement\\" && f.AssignmentStatement)
      return f.AssignmentStatement(n);
    if (n.tag === \\"declarationstatement\\" && f.DeclarationStatement)
      return f.DeclarationStatement(n);
    return orElse;
  };
  /**
   * Given an instance of type Node, take action depending on the
   * specific underlying node type
   **/
  export const forEach = (
    n: Node,
    f: {
      Function: (n: Function) => void;
      Declaration: (n: Declaration) => void;
      Argument: (n: Argument) => void;
      Body: (n: Body) => void;
      AssignmentStatement: (n: AssignmentStatement) => void;
      DeclarationStatement: (n: DeclarationStatement) => void;
    }
  ): void => {
    switch (n.tag) {
      case \\"function\\":
        return f.Function(n);
      case \\"declaration\\":
        return f.Declaration(n);
      case \\"argument\\":
        return f.Argument(n);
      case \\"body\\":
        return f.Body(n);
      case \\"assignmentstatement\\":
        return f.AssignmentStatement(n);
      case \\"declarationstatement\\":
        return f.DeclarationStatement(n);
      default: {
        const x: never = n;
        throw new Error(
          \\"Instance of Node has unexpected value for tag: \\" + (n as any).tag
        );
      }
    }
  };
  /**
   * Given an instance of type Node, take action for certain subtypes
   * and for all others, simply return the \`orElse\` argument
   **/
  export const partialForEach = (
    n: Node,
    f: Partial<{
      Function: (n: Function) => void;
      Declaration: (n: Declaration) => void;
      Argument: (n: Argument) => void;
      Body: (n: Body) => void;
      AssignmentStatement: (n: AssignmentStatement) => void;
      DeclarationStatement: (n: DeclarationStatement) => void;
    }>,
    orElse?: (n: Node) => void
  ) => {
    if (n.tag === \\"function\\" && f.Function) return f.Function(n);
    if (n.tag === \\"declaration\\" && f.Declaration) return f.Declaration(n);
    if (n.tag === \\"argument\\" && f.Argument) return f.Argument(n);
    if (n.tag === \\"body\\" && f.Body) return f.Body(n);
    if (n.tag === \\"assignmentstatement\\" && f.AssignmentStatement)
      return f.AssignmentStatement(n);
    if (n.tag === \\"declarationstatement\\" && f.DeclarationStatement)
      return f.DeclarationStatement(n);
    if (orElse) return orElse(n);
  };
}
"
`;

exports[`Test sample AST specifications should generate proper output for repmin.yaml using json 1`] = `
Object {
  "bases": Map {},
  "leaves": Map {
    "Fork" => Object {
      "extends": Array [],
      "fields": Map {
        "left" => Object {
          "struct": "scalar",
          "type": Object {
            "kind": "node",
            "types": Array [
              "Tree",
            ],
          },
        },
        "right" => Object {
          "struct": "scalar",
          "type": Object {
            "kind": "node",
            "types": Array [
              "Tree",
            ],
          },
        },
      },
      "name": "Fork",
      "parentUnion": Object {
        "name": "Tree",
        "subtypes": Array [
          "Fork",
          "Leaf",
        ],
        "type": "union",
      },
      "rootUnion": Object {
        "name": "Tree",
        "subtypes": Array [],
        "type": "union",
      },
      "tag": "fork",
      "type": "leaf",
    },
    "Leaf" => Object {
      "extends": Array [],
      "fields": Map {
        "value" => Object {
          "struct": "scalar",
          "type": Object {
            "kind": "builtin",
            "types": Array [
              "number",
            ],
          },
        },
      },
      "name": "Leaf",
      "parentUnion": Object {
        "name": "Tree",
        "subtypes": Array [
          "Fork",
          "Leaf",
        ],
        "type": "union",
      },
      "rootUnion": Object {
        "name": "Tree",
        "subtypes": Array [],
        "type": "union",
      },
      "tag": "leaf",
      "type": "leaf",
    },
  },
  "names": Set {
    "Tree",
    "Fork",
    "Leaf",
  },
  "options": Object {
    "constructor": "inline",
    "maps": "json",
    "optional": "json",
    "tagName": "tag",
  },
  "unions": Map {
    "Tree" => Object {
      "name": "Tree",
      "subtypes": Array [
        "Fork",
        "Leaf",
      ],
      "type": "union",
    },
  },
}
`;

exports[`Test sample AST specifications should generate proper output for repmin.yaml using json 2`] = `
"/**
 * DO NOT EDIT - This file was generated by verger.  If you want to change something
 * edit the upstream AST specification and regenerate this file
 **/

/**
 * This code implements the types and functions associated with
 * the leaf type Fork.
 **/
export interface Fork {
  tag: \\"fork\\";
  left: Tree;
  right: Tree;
}
export class Fork {
  /**
   * A predicate function that take an instance of type Tree and determines if it is an instance of Fork
   **/
  static is = (x: Tree): x is Fork => {
    return x.tag === \\"fork\\";
  };
  /**
   * Given an instance of Fork, determine all children that are instances of Tree
   **/
  static children = (x: Fork) => {
    return [x.left, x.right] as const;
  };
  /**
   * Although generally not necessary, this tag can be used to identify instances of Fork
   **/
  static tag = \\"fork\\";
}
/**
 * This function can be invoked to create a new instance of Fork
 **/
export function fork(left: Tree, right: Tree): Fork {
  return { tag: \\"fork\\", left, right };
}

/**
 * This code implements the types and functions associated with
 * the leaf type Leaf.
 **/
export interface Leaf {
  tag: \\"leaf\\";
  value: number;
}
export class Leaf {
  /**
   * A predicate function that take an instance of type Tree and determines if it is an instance of Leaf
   **/
  static is = (x: Tree): x is Leaf => {
    return x.tag === \\"leaf\\";
  };
  /**
   * Given an instance of Leaf, determine all children that are instances of Tree
   **/
  static children = (x: Leaf) => {
    return [] as const;
  };
  /**
   * Although generally not necessary, this tag can be used to identify instances of Leaf
   **/
  static tag = \\"leaf\\";
}
/**
 * This function can be invoked to create a new instance of Leaf
 **/
export function leaf(value: number): Leaf {
  return { tag: \\"leaf\\", value };
}

/**
 * This code implements the types and functions associated with
 * the union type Tree.
 **/
export type Tree = Fork | Leaf;
namespace Tree {
  /**
   * Given an instance of type Tree, map that value depending on the
   * specific underlying node type
   **/
  export const match = <R>(
    n: Tree,
    f: {
      Fork: (n: Fork) => R;
      Leaf: (n: Leaf) => R;
    }
  ) => {
    switch (n.tag) {
      case \\"fork\\":
        return f.Fork(n);
      case \\"leaf\\":
        return f.Leaf(n);
      default: {
        const x: never = n;
        throw new Error(
          \\"Instance of Tree has unexpected value for tag: \\" + (n as any).tag
        );
      }
    }
  };
  /**
   * Given an instance of type Tree, map that value for certain subtypes
   * and for all others, simply return the \`orElse\` argument
   **/
  export const partialMatch = <R>(
    n: Tree,
    f: Partial<{
      Fork: (n: Fork) => R;
      Leaf: (n: Leaf) => R;
    }>,
    orElse: R
  ) => {
    if (n.tag === \\"fork\\" && f.Fork) return f.Fork(n);
    if (n.tag === \\"leaf\\" && f.Leaf) return f.Leaf(n);
    return orElse;
  };
  /**
   * Given an instance of type Tree, take action depending on the
   * specific underlying node type
   **/
  export const forEach = (
    n: Tree,
    f: {
      Fork: (n: Fork) => void;
      Leaf: (n: Leaf) => void;
    }
  ): void => {
    switch (n.tag) {
      case \\"fork\\":
        return f.Fork(n);
      case \\"leaf\\":
        return f.Leaf(n);
      default: {
        const x: never = n;
        throw new Error(
          \\"Instance of Tree has unexpected value for tag: \\" + (n as any).tag
        );
      }
    }
  };
  /**
   * Given an instance of type Tree, take action for certain subtypes
   * and for all others, simply return the \`orElse\` argument
   **/
  export const partialForEach = (
    n: Tree,
    f: Partial<{
      Fork: (n: Fork) => void;
      Leaf: (n: Leaf) => void;
    }>,
    orElse?: (n: Tree) => void
  ) => {
    if (n.tag === \\"fork\\" && f.Fork) return f.Fork(n);
    if (n.tag === \\"leaf\\" && f.Leaf) return f.Leaf(n);
    if (orElse) return orElse(n);
  };
}
"
`;

exports[`Test sample AST specifications should generate proper output for repmin.yaml using purify 1`] = `
Object {
  "bases": Map {},
  "leaves": Map {
    "Fork" => Object {
      "extends": Array [],
      "fields": Map {
        "left" => Object {
          "struct": "scalar",
          "type": Object {
            "kind": "node",
            "types": Array [
              "Tree",
            ],
          },
        },
        "right" => Object {
          "struct": "scalar",
          "type": Object {
            "kind": "node",
            "types": Array [
              "Tree",
            ],
          },
        },
      },
      "name": "Fork",
      "parentUnion": Object {
        "name": "Tree",
        "subtypes": Array [
          "Fork",
          "Leaf",
        ],
        "type": "union",
      },
      "rootUnion": Object {
        "name": "Tree",
        "subtypes": Array [],
        "type": "union",
      },
      "tag": "fork",
      "type": "leaf",
    },
    "Leaf" => Object {
      "extends": Array [],
      "fields": Map {
        "value" => Object {
          "struct": "scalar",
          "type": Object {
            "kind": "builtin",
            "types": Array [
              "number",
            ],
          },
        },
      },
      "name": "Leaf",
      "parentUnion": Object {
        "name": "Tree",
        "subtypes": Array [
          "Fork",
          "Leaf",
        ],
        "type": "union",
      },
      "rootUnion": Object {
        "name": "Tree",
        "subtypes": Array [],
        "type": "union",
      },
      "tag": "leaf",
      "type": "leaf",
    },
  },
  "names": Set {
    "Tree",
    "Fork",
    "Leaf",
  },
  "options": Object {
    "constructor": "inline",
    "maps": "json",
    "optional": "purify",
    "tagName": "tag",
  },
  "unions": Map {
    "Tree" => Object {
      "name": "Tree",
      "subtypes": Array [
        "Fork",
        "Leaf",
      ],
      "type": "union",
    },
  },
}
`;

exports[`Test sample AST specifications should generate proper output for repmin.yaml using purify 2`] = `
"/**
 * DO NOT EDIT - This file was generated by verger.  If you want to change something
 * edit the upstream AST specification and regenerate this file
 **/

/**
 * This code implements the types and functions associated with
 * the leaf type Fork.
 **/
export interface Fork {
  tag: \\"fork\\";
  left: Tree;
  right: Tree;
}
export class Fork {
  /**
   * A predicate function that take an instance of type Tree and determines if it is an instance of Fork
   **/
  static is = (x: Tree): x is Fork => {
    return x.tag === \\"fork\\";
  };
  /**
   * Given an instance of Fork, determine all children that are instances of Tree
   **/
  static children = (x: Fork) => {
    return [x.left, x.right] as const;
  };
  /**
   * Although generally not necessary, this tag can be used to identify instances of Fork
   **/
  static tag = \\"fork\\";
}
/**
 * This function can be invoked to create a new instance of Fork
 **/
export function fork(left: Tree, right: Tree): Fork {
  return { tag: \\"fork\\", left, right };
}

/**
 * This code implements the types and functions associated with
 * the leaf type Leaf.
 **/
export interface Leaf {
  tag: \\"leaf\\";
  value: number;
}
export class Leaf {
  /**
   * A predicate function that take an instance of type Tree and determines if it is an instance of Leaf
   **/
  static is = (x: Tree): x is Leaf => {
    return x.tag === \\"leaf\\";
  };
  /**
   * Given an instance of Leaf, determine all children that are instances of Tree
   **/
  static children = (x: Leaf) => {
    return [] as const;
  };
  /**
   * Although generally not necessary, this tag can be used to identify instances of Leaf
   **/
  static tag = \\"leaf\\";
}
/**
 * This function can be invoked to create a new instance of Leaf
 **/
export function leaf(value: number): Leaf {
  return { tag: \\"leaf\\", value };
}

/**
 * This code implements the types and functions associated with
 * the union type Tree.
 **/
export type Tree = Fork | Leaf;
namespace Tree {
  /**
   * Given an instance of type Tree, map that value depending on the
   * specific underlying node type
   **/
  export const match = <R>(
    n: Tree,
    f: {
      Fork: (n: Fork) => R;
      Leaf: (n: Leaf) => R;
    }
  ) => {
    switch (n.tag) {
      case \\"fork\\":
        return f.Fork(n);
      case \\"leaf\\":
        return f.Leaf(n);
      default: {
        const x: never = n;
        throw new Error(
          \\"Instance of Tree has unexpected value for tag: \\" + (n as any).tag
        );
      }
    }
  };
  /**
   * Given an instance of type Tree, map that value for certain subtypes
   * and for all others, simply return the \`orElse\` argument
   **/
  export const partialMatch = <R>(
    n: Tree,
    f: Partial<{
      Fork: (n: Fork) => R;
      Leaf: (n: Leaf) => R;
    }>,
    orElse: R
  ) => {
    if (n.tag === \\"fork\\" && f.Fork) return f.Fork(n);
    if (n.tag === \\"leaf\\" && f.Leaf) return f.Leaf(n);
    return orElse;
  };
  /**
   * Given an instance of type Tree, take action depending on the
   * specific underlying node type
   **/
  export const forEach = (
    n: Tree,
    f: {
      Fork: (n: Fork) => void;
      Leaf: (n: Leaf) => void;
    }
  ): void => {
    switch (n.tag) {
      case \\"fork\\":
        return f.Fork(n);
      case \\"leaf\\":
        return f.Leaf(n);
      default: {
        const x: never = n;
        throw new Error(
          \\"Instance of Tree has unexpected value for tag: \\" + (n as any).tag
        );
      }
    }
  };
  /**
   * Given an instance of type Tree, take action for certain subtypes
   * and for all others, simply return the \`orElse\` argument
   **/
  export const partialForEach = (
    n: Tree,
    f: Partial<{
      Fork: (n: Fork) => void;
      Leaf: (n: Leaf) => void;
    }>,
    orElse?: (n: Tree) => void
  ) => {
    if (n.tag === \\"fork\\" && f.Fork) return f.Fork(n);
    if (n.tag === \\"leaf\\" && f.Leaf) return f.Leaf(n);
    if (orElse) return orElse(n);
  };
}
"
`;
