// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Test sample AST specifications should generate proper output for expr.yaml 1`] = `
"// DO NOT EDIT
// This file was automatically generated

export interface BinaryOp  {
    left: Expr;
    right: Expr;
}
export interface Literal  {
    tag: \\"literal\\";
    value: number;
}
export class Literal {
    static is = (x: Expr): x is Literal => { return x.tag===\\"literal\\" }
    static children = (x: Literal) => { return [] as const }
    static tag = \\"literal\\"
}
export interface ArithmeticOp extends BinaryOp {
    tag: \\"arithmeticop\\";
    op: \\"+\\" | \\"-\\" | \\"*\\" | \\"/\\";
}
export class ArithmeticOp {
    static is = (x: Expr): x is ArithmeticOp => { return x.tag===\\"arithmeticop\\" }
    static children = (x: ArithmeticOp) => { return [x.left, x.right] as const }
    static tag = \\"arithmeticop\\"
}
export interface UnaryOp  {
    tag: \\"unaryop\\";
    expr: Expr;
    op: \\"()\\" | \\"+\\" | \\"-\\";
}
export class UnaryOp {
    static is = (x: Expr): x is UnaryOp => { return x.tag===\\"unaryop\\" }
    static children = (x: UnaryOp) => { return [x.expr] as const }
    static tag = \\"unaryop\\"
}
export interface RelOp extends BinaryOp {
    tag: \\"relop\\";
    op: \\"+\\" | \\"-\\" | \\"*\\" | \\"/\\";
}
export class RelOp {
    static is = (x: Expr): x is RelOp => { return x.tag===\\"relop\\" }
    static children = (x: RelOp) => { return [x.left, x.right] as const }
    static tag = \\"relop\\"
}
export type Expr = Literal | ArithmeticOp | UnaryOp | RelOp;"
`;

exports[`Test sample AST specifications should generate proper output for expr.yaml using purify 1`] = `
"// DO NOT EDIT
// This file was automatically generated

export interface BinaryOp  {
    left: Expr;
    right: Expr;
}
export interface Literal  {
    tag: \\"literal\\";
    value: number;
}
export class Literal {
    static is = (x: Expr): x is Literal => { return x.tag===\\"literal\\" }
    static children = (x: Literal) => { return [] as const }
    static tag = \\"literal\\"
}
export interface ArithmeticOp extends BinaryOp {
    tag: \\"arithmeticop\\";
    op: \\"+\\" | \\"-\\" | \\"*\\" | \\"/\\";
}
export class ArithmeticOp {
    static is = (x: Expr): x is ArithmeticOp => { return x.tag===\\"arithmeticop\\" }
    static children = (x: ArithmeticOp) => { return [x.left, x.right] as const }
    static tag = \\"arithmeticop\\"
}
export interface UnaryOp  {
    tag: \\"unaryop\\";
    expr: Expr;
    op: \\"()\\" | \\"+\\" | \\"-\\";
}
export class UnaryOp {
    static is = (x: Expr): x is UnaryOp => { return x.tag===\\"unaryop\\" }
    static children = (x: UnaryOp) => { return [x.expr] as const }
    static tag = \\"unaryop\\"
}
export interface RelOp extends BinaryOp {
    tag: \\"relop\\";
    op: \\"+\\" | \\"-\\" | \\"*\\" | \\"/\\";
}
export class RelOp {
    static is = (x: Expr): x is RelOp => { return x.tag===\\"relop\\" }
    static children = (x: RelOp) => { return [x.left, x.right] as const }
    static tag = \\"relop\\"
}
export type Expr = Literal | ArithmeticOp | UnaryOp | RelOp;"
`;

exports[`Test sample AST specifications should generate proper output for repmin.yaml 1`] = `
"// DO NOT EDIT
// This file was automatically generated


export interface Fork  {
    tag: \\"fork\\";
    left: Tree;
    right: Tree;
}
export class Fork {
    static is = (x: Tree): x is Fork => { return x.tag===\\"fork\\" }
    static children = (x: Fork) => { return [x.left, x.right] as const }
    static tag = \\"fork\\"
}
export interface Leaf  {
    tag: \\"leaf\\";
    value: number;
}
export class Leaf {
    static is = (x: Tree): x is Leaf => { return x.tag===\\"leaf\\" }
    static children = (x: Leaf) => { return [] as const }
    static tag = \\"leaf\\"
}
export type Tree = Fork | Leaf;"
`;

exports[`Test sample AST specifications should generate proper output for repmin.yaml using purify 1`] = `
"// DO NOT EDIT
// This file was automatically generated


export interface Fork  {
    tag: \\"fork\\";
    left: Tree;
    right: Tree;
}
export class Fork {
    static is = (x: Tree): x is Fork => { return x.tag===\\"fork\\" }
    static children = (x: Fork) => { return [x.left, x.right] as const }
    static tag = \\"fork\\"
}
export interface Leaf  {
    tag: \\"leaf\\";
    value: number;
}
export class Leaf {
    static is = (x: Tree): x is Leaf => { return x.tag===\\"leaf\\" }
    static children = (x: Leaf) => { return [] as const }
    static tag = \\"leaf\\"
}
export type Tree = Fork | Leaf;"
`;
